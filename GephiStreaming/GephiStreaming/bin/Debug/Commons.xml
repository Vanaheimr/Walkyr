<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Commons</name>
    </assembly>
    <members>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionException`3">
            <summary>
            An exception during transaction processing occurred!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionException`3._Transaction">
            <summary>
            The transaction causing this exception.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.TransactionException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            An exception during transaction processing occurred!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.CouldNotBeginTransactionException`3">
            <summary>
            A transaction could not be started.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.CouldNotBeginTransactionException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A transaction could not be started.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.CouldNotCommitNestedTransactionException`3">
            <summary>
            A nested transaction could not be committed.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.CouldNotCommitNestedTransactionException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A nested transaction could not be committed.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.CouldNotRolleBackNestedTransactionException`3">
            <summary>
            A nested transaction could not be rolled back.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.CouldNotRolleBackNestedTransactionException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            A nested transaction could not be rolled back.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionAlreadyCommitedException`3">
            <summary>
            The transaction was already committed.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.TransactionAlreadyCommitedException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction was already committed.
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionAlreadyRolledbackException`3">
            <summary>
            The transaction was already rolled back!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.TransactionAlreadyRolledbackException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction was already rolled back!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionAlreadyRunningException`3">
            <summary>
            The transaction is already running!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.TransactionAlreadyRunningException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is already running!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionCurrentlyCommittingException`3">
            <summary>
            The transaction is currently committing!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.TransactionCurrentlyCommittingException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is currently committing!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionCurrentlyRollingBackException`3">
            <summary>
            The transaction is currently rolling back!
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.TransactionCurrentlyRollingBackException`3.#ctor(de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2},System.String,System.Exception)">
            <summary>
            The transaction is currently rolling back!
            </summary>
            <param name="Transaction">A transaction.</param>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IImmutableMap`2">
            <summary>
            Provides a generic immutable map/dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.VoteEvaluator`1">
            <summary>
            A delegate for evaluating a vote based on the
            number of yes and no votes.
            </summary>
            <typeparam name="TResult">The type of the voting result.</typeparam>
            <param name="NumberOfYesVotes">The current number of yes votes.</param>
            <param name="NumberOfNoVotes">The current number of no votes.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.IVoteExtentions">
            <summary>
            Extentions methods for the IVote interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.IVoteExtentions.Yes(de.ahzf.Illias.Commons.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow'.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.IVoteExtentions.Ok(de.ahzf.Illias.Commons.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow'.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.IVoteExtentions.Allow(de.ahzf.Illias.Commons.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'yes' or 'ok' or 'allow'.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.IVoteExtentions.No(de.ahzf.Illias.Commons.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'no' or 'deny'.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.IVoteExtentions.Deny(de.ahzf.Illias.Commons.Votes.IVote{System.Boolean})">
            <summary>
            Vote 'no' or 'deny'.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.IVote">
            <summary>
            A vote is a simple way to ask multiple event subscribers
            about their opinion and to evaluate the results.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Votes.IVote.TotalNumberOfVotes">
            <summary>
            The current number of votes.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.IVote`1">
            <summary>
            A vote is a simple way to ask multiple event subscribers
            about their opinion and to evaluate the results.
            </summary>
            <typeparam name="TResult">The type of the voting result.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.IVote`1.VoteFor(`0)">
            <summary>
            Give your vote.
            </summary>
            <param name="VotingValue">The value of the vote.</param>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Votes.IVote`1.Result">
            <summary>
            The result of the voting.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.UniqueTimestamp">
            <summary>
            This class will return the current timestamp, but will ensure its
            uniqueness which means it will never return the same value twice.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.UniqueTimestamp.Now">
            <summary>
            Returns an unique timestamp as a DateTime object
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.UniqueTimestamp.Ticks">
            <summary>
            Returns an unique timestamp as an UInt64
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.UniqueTimestamp.GetUniqueTimestamp">
            <summary>
            Return a unique timestamp
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.Transaction`3">
            <summary>
            A (distributed) transaction.
            </summary>
            <typeparam name="TTransactionId">The type of the transaction Id.</typeparam>
            <typeparam name="TSystemId">The type of the system Id.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.#ctor(`0,`1,System.String,System.Boolean,System.Boolean,de.ahzf.Illias.Commons.Transactions.IsolationLevel,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Func{`2})">
            <summary>
            Creates a new transaction having the given parameters.
            </summary>
            <param name="Id"></param>
            <param name="SystemId"></param>
            <param name="Name">A name or identification for this transaction.</param>
            <param name="Distributed">Indicates that this transaction should synched within the entire cluster.</param>
            <param name="LongRunning">Indicates that this transaction is a long-running transaction.</param>
            <param name="IsolationLevel">The isolation level of this transaction.</param>
            <param name="CreationTime"></param>
            <param name="InvalidationTime"></param>
            <param name="TransactionObjectCreator"></param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.#ctor(`0,`1,de.ahzf.Illias.Commons.Transactions.Transaction{`0,`1,`2})">
            <summary>
            Creates a new nested transaction.
            </summary>
            <param name="Id"></param>
            <param name="SystemId"></param>
            <param name="ParentTransaction"></param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.Commit(System.String,System.Boolean)">
            <summary>
            Mark this transaction as committed.
            Will not invoke the OnDispose event to clean up the ressources
            </summary>
            <param name="Comment">A comment.</param>
            <param name="Async">if true commit will be async; default: false</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.Rollback(System.String,System.Boolean)">
            <summary>
            Mark this transaction as rolledback. Will invoke the event OnDispose to clean up ressources.
            </summary>
            <param name="Comment">A comment.</param>
            <param name="Async">if true rollback will be async; default: false</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.BeginNestedTransaction(System.Boolean,System.Boolean,de.ahzf.Illias.Commons.Transactions.IsolationLevel,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a nested transaction having the given parameters.
            </summary>
            <param name="Distributed">Indicates that the nested transaction should synched within the entire cluster.</param>
            <param name="LongRunning">Indicates that the nested transaction is a long-running transaction.</param>
            <param name="IsolationLevel">The isolation level of the nested transaction.</param>
            <param name="Name">A name or identification for the nested transaction.</param>
            <param name="TimeStamp">A timestamp.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.GetNestedTransaction">
            <summary>
            Return the current nested transaction.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.Dispose">
            <summary>
            Dispose this transaction
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Transactions.Transaction`3.ToString">
            <summary>
            Return a string representation of this object.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.Id">
            <summary>
            The Id of this transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.SystemId">
            <summary>
            The SystemId of the QuadStore initiating this transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.Name">
            <summary>
            A user-friendly name or identification for this transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.ParentTransaction">
            <summary>
            The parent transaction, if this is a nested transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.CreationTime">
            <summary>
            The creation time of this transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.IsolationLevel">
            <summary>
            The isolation level of this transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.Distributed">
            <summary>
            Wether this transaction should be synched within an distributed QuadStore.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.LongRunning">
            <summary>
            Wether this transaction is a long-running transaction.
            Long-running transactions may e.g. be swapped on disc.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.InvalidationTime">
            <summary>
            A timestamp after this transaction will no longer be valid.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.TXObject">
            <summary>
            The transaction object.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.FinishingTime">
            <summary>
            The timestamp when this transaction was finished (committed or rolled-back).
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.State">
            <summary>
            The current state of this transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.IsNestedTransaction">
            <summary>
            Returns true if this transaction is a nested transaction.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Transactions.Transaction`3.HasNestedTransactions">
            <summary>
            Returns true if this transaction contains nested transactions.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertiesMaps">
            <summary>
            Extention methods for PropertiesMaps.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesMaps.PMap``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesMaps.PMap``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesMaps.PMap``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesMaps.PMap``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions">
            <summary>
            Extensions to the IProperties interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetProperty``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Action{``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key and its value.</param>
            <param name="OnError">A delegate to call for the associated value of the given property key when an error occurs.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Action{``0,``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key and its value.</param>
            <param name="OnError">A delegate to call for the associated value of the given property key when an error occurs.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``3(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for the associated property value of the given property key.</param>
            <param name="OnErrorFunc">A delegate to call for the associated property key when the key was not found.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``3(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetProperty``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Type)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetString``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetDouble``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Action{``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for the associated value of the given property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperty``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Action{``0,``1},System.Action{``0})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0,System.Type,System.Func{``1,System.Object})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for the associated value of the given property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertyFunc``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0,System.Type,System.Func{``0,``1,System.Object})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IReadOnlyProperties">An object implementing IReadOnlyProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for the key and associated value of the given property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetCastedProperty``3(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0)">
            <summary>
            Return the object value of type TValue associated with the provided property key.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TCast">The casted type of the properety values.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetDynamicProperty``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0)">
            <summary>
            Return the object value associated with the provided property key as dynamic.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetDynamicProperty``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0,System.Type)">
            <summary>
            Return the object value of type TValue associated with the provided property key as dynamic.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetKeyValuePair``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0,System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccess">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.GetKeyValuePair``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0,System.Type,System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccess">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.KeyValuePairFunc``3(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0,System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="OnSuccessFunc">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.KeyValuePairFunc``3(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},``0,System.Type,System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned
            and the type of the value matches.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="Key">The property key.</param>
            <param name="PropertyType">The expected type of the property value.</param>
            <param name="OnSuccessFunc">A delegate to call for a matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1},System.Action{``1})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate called for the associated value of each matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1},System.Action{``0,``1})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate to call for each matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.UseProperties``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccess">A delegate to call for each matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1},System.Func{``1,``2})">
            <summary>
            Call the given func delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for the associated value of each matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for each matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.PropertiesFunc``3(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Call the given delegate if the given property key is assigned.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <param name="OnSuccessFunc">A delegate returning an object for each matching KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.FilteredKeys``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Get a filtered enumeration of all property keys.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter KeyValuePairs based on their keys and values.</param>
            <returns>An enumeration of all selected property values.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.FilteredValues``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Get a filtered enumeration of all property values.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValueFilter">A delegate to filter KeyValuePairs based on their keys and values.</param>
            <returns>An enumeration of all selected property values.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyPropertiesExtensions.CompareProperties``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},de.ahzf.Illias.Commons.Collections.IProperties{``0,``1})">
            <summary>
            Compares the properties of two different IElement objects (vertices or edges).
            </summary>
            <param name="myIProperties1">A vertex or edge</param>
            <param name="myIProperties2">Another vertex or edge</param>
            <returns>true if both IElement objects carry the same properties</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.IsolationLevel">
            <summary>
            Transaction Isolation Levels
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.IsolationLevel.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.IsolationLevel.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IGroupedCollection`3">
            <summary>
            A collection of values with the additional possibility
            to group these values.
            </summary>
            <typeparam name="TKey">The type of the collection keys.</typeparam>
            <typeparam name="TValue">The type of the collection values.</typeparam>
            <typeparam name="TGroup">The type of the collection groups.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.TryAddValue(`0,`1,`2)">
            <summary>
            Tries to add a KeyValueGroupTriple to the collection.
            </summary>
            <param name="Key">The key of the triple.</param>
            <param name="Value">The value of the triple.</param>
            <param name="Group">The group of the triple.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.ContainsGroup(`2)">
            <summary>
            Determines whether the collection contains the specified group.
            </summary>
            <param name="Group">A group.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.Count">
            <summary>
            The total number of values in the grouped collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.Count(`2)">
            <summary>
            The number of values in the given group collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.TryGetByKey(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns>True, if the key was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.TryGetByGroup(`2,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with the specified group.
            </summary>
            <param name="Group">The group.</param>
            <param name="Values">An enumeration of values.</param>
            <returns>True, if the group was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.TryRemoveValue(`0,`1,`2)">
            <summary>
            Attempts to remove the given value with the specified
            key and group from the grouped collection.
            </summary>
            <param name="Key">The key of the value.</param>
            <param name="Value">The value to remove.</param>
            <param name="Group">The group of the value.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IGroupedCollection`3.Clear">
            <summary>
            Removes all keys, values and groups
            from the grouped collection.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.TSQueue`1">
            <summary>
            A thread-safe, lock-free queue.
            </summary>
            <typeparam name="T">The type of the values stored within the queue.</typeparam>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.TSQueue`1.First">
            <summary>
            The first element of the queue.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.TSQueue`1.MaxNumberOfElements">
            <summary>
            The maximal number of values within the queue.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.TSQueue`1.Count">
            <summary>
            The current number of elements within the queue.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.TSQueue`1.QueueElement">
            <summary>
            An element within a queue.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.TSQueue`1.QueueElement.#ctor(`0)">
            <summary>
            Create a single queue element.
            </summary>
            <param name="Value">The value stored within the node.</param>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.TSQueue`1.QueueElement.Next">
            <summary>
            Return the next element within the queue.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.TSQueue`1.QueueElement.Value">
            <summary>
            Return the value stored within the element.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Loops">
            <summary>
            Loop methods for integers.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.Int32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.UInt32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.Int64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.UInt64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.Int32,System.Action{System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.Int64,System.Action{System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.UInt32,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Loops.Do(System.UInt64,System.Action{System.UInt64,System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.StringExtensions">
            <summary>
            Extensions to the String class.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.StringExtensions.IsNotNullAndContains(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified Substring
            occurs within the given string.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring to search for.</param>
            <returns>True if the value parameter occurs within this string.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.StringExtensions.RemoveQuotes(System.String)">
            <summary>
            Removes leading and/or tailing (double) quotes.
            </summary>
            <param name="String">The string to check.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.StringExtensions.RemoveAllBefore(System.String,System.String)">
            <summary>
            Removes everything from the string before the given substring.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.StringExtensions.RemoveAllAfter(System.String,System.String)">
            <summary>
            Removes everything from the string after the given substring.
            </summary>
            <param name="String">A string.</param>
            <param name="Substring">A substring.</param>
        </member>
        <member name="P:de.ahzf.Illias.Commons.StringExtensions.DoubleNewLine">
            <summary>
            NewLine but twice.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.ABooleanVote">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% are okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Votes.ABooleanVote._NumberOfYesVotes">
            <summary>
            The current number of vetos.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Votes.ABooleanVote._NumberOfNoVotes">
            <summary>
            The current total number of votes.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Votes.ABooleanVote.VoteEvaluator">
            <summary>
            A delegate to evaluate the result of the voting.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.ABooleanVote.#ctor(de.ahzf.Illias.Commons.Votes.VoteEvaluator{System.Boolean})">
            <summary>
            An abstract boolean voting.
            </summary>
            <param name="VoteEvaluator">A delegate to evaluate the result of the voting.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.ABooleanVote.VoteFor(System.Boolean)">
            <summary>
            Give your vote.
            </summary>
            <param name="VotingValue">The value of the vote.</param>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Votes.ABooleanVote.TotalNumberOfVotes">
            <summary>
            The current total number of votes.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Votes.ABooleanVote.Result">
            <summary>
            The result of the voting.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IRevisionId`1">
            <summary>
            Provides a generic revision identifier.
            </summary>
            <typeparam name="TRevId">The type of the revision identifier.</typeparam>
        </member>
        <member name="P:de.ahzf.Illias.Commons.IRevisionId`1.RevId">
            <summary>
            A generic revision identifier.
            All vertices, edges and hyper edges of a graph must have unique identifiers.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.RevisionId">
            <summary>
            A RevId is an identificator for a specific IElement revision in
            a distributed system consisting of a timestamp and a SystemId.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.#ctor(de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Generates a RevisionId based on the actual timestamp and the given SystemId.
            </summary>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.#ctor(System.UInt64,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Generates a RevisionId based on the given UInt64 timestamp and the given SystemId.
            </summary>
            <param name="Timestamp">A timestamp</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.#ctor(System.DateTime,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Generates a RevisionId based on the given DateTime object and the given SystemId.
            </summary>
            <param name="DateTime">A DateTime object</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.#ctor(System.String,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Generates a RevisionId based on the "yyyyddMM.HHmmss.fffffff" formated
            string representation of a DateTime object and the given SystemId.
            </summary>
            <param name="DateTimeString">A DateTime object as "yyyyddMM.HHmmss.fffffff"-formated string</param>
            <param name="SystemId">An unique identificator for the generating system, process or thread</param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.#ctor(System.String)">
            <summary>
            Generates a RevisionId based on the "yyyyddMM.HHmmss.fffffff(SystemId)"
            formated string representation of a RevId.
            </summary>
            <param name="RevIdString">A RevId object as "yyyyddMM.HHmmss.fffffff(SystemId)"-formated string</param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.op_Equality(de.ahzf.Illias.Commons.RevisionId,de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.op_Inequality(de.ahzf.Illias.Commons.RevisionId,de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.op_LessThan(de.ahzf.Illias.Commons.RevisionId,de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.op_LessThanOrEqual(de.ahzf.Illias.Commons.RevisionId,de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.op_GreaterThan(de.ahzf.Illias.Commons.RevisionId,de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.op_GreaterThanOrEqual(de.ahzf.Illias.Commons.RevisionId,de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevId1">A RevId.</param>
            <param name="RevId2">Another RevId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.CompareTo(de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="RevisionId">A RevisionId to compare with.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.Equals(de.ahzf.Illias.Commons.RevisionId)">
            <summary>
            Compares two RevIds for equality.
            </summary>
            <param name="RevisionId">A RevisionId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.RevisionId.ToString">
            <summary>
            Returns a formated string representation of this revision
            </summary>
            <returns>A formated string representation of this revision</returns>
        </member>
        <member name="P:de.ahzf.Illias.Commons.RevisionId.Timestamp">
            <summary>
            The timestamp of this revision.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.RevisionId.SystemId">
            <summary>
            A unique identification of the generating system,
            process or thread of this revision.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.DateTimeExtensions">
            <summary>
            Extensions to the DateTime class.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertiesTables">
            <summary>
            Extention methods for PropertiesTables.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesTables.PTable``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesTables.PTable``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Transactions.TransactionState">
            <summary>
            The state of a transaction.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionState.Running">
            <summary>
            The transaction is still running.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionState.NestedTransaction">
            <summary>
            The transaction has nested transactions.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionState.Committing">
            <summary>
            The transaction is currently comitting.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionState.Committed">
            <summary>
            The transaction was comitted.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionState.RollingBack">
            <summary>
            The transaction is currently rolling back.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Transactions.TransactionState.RolledBack">
            <summary>
            The transaction was rolled back.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.IPropertiesInitializer`2">
            <summary>
            A delegate for IProperties initializing.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">The properties object.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2">
            <summary>
            A generic interface maintaining a collection of key/value properties
            within the given datastructure.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.ContainsKey(`0)">
            <summary>
            Determines if the given key exists.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.ContainsValue(`1)">
            <summary>
            Determines if the given value exists.
            </summary>
            <param name="Value">A value.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.Contains(`0,`1)">
            <summary>
            Determines if the given key and value exists.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the given KeyValuePair exists.
            </summary>
            <param name="KeyValuePair">A KeyValuePair.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.TryGetProperty(`0,`1@)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">The associated value.</param>
            <returns>True if the returned value is valid. False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.TryGetProperty``1(`0,``0@)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">The associated value.</param>
            <typeparam name="T">Check if the value is of the given type.</typeparam>
            <returns>True if the returned value is valid. False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.GetProperties(de.ahzf.Illias.Commons.KeyValueFilter{`0,`1})">
            <summary>
            Return a filtered enumeration of all KeyValuePairs.
            </summary>
            <param name="KeyValueFilter">A delegate to filter properties based on their keys and values.</param>
            <returns>A enumeration of all key/value pairs matching the given KeyValueFilter.</returns>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.IdKey">
            <summary>
            The property key of the identification.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.RevIdKey">
            <summary>
            The property key of the revision identification.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.DescriptionKey">
            <summary>
            The property key of the description.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.Keys">
            <summary>
            An enumeration of all property keys.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.Values">
            <summary>
            An enumeration of all property values.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.Collections.IReadOnlyProperties`2.Item(`0)">
            <summary>
            Return the value associated with the given key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.KeyValueFilter`2">
            <summary>
            A delegate to filter KeyValuePairs based on their keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
            <returns>True if the KeyValuePair should be returned; False otherwise.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.IPropertiesExtensions">
            <summary>
            Extensions to the IProperties interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IPropertiesExtensions.SetProperty``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Assign a KeyValuePair to the given IProperties object.
            If a value already exists for this key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValuePair">A KeyValuePair of type string and object</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IPropertiesExtensions.SetProperties``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Assign the given enumeration of KeyValuePairs to the IProperties object.
            If a value already exists for a key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="KeyValuePairs">A enumeration of KeyValuePairs of type string and object</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IPropertiesExtensions.SetProperties``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Assign the given IDictionary to the IProperties object.
            If a value already exists for a key, then the previous key/value is overwritten.
            </summary>
            <typeparam name="TKey">The type of the property key.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="IProperties">An object implementing IProperties.</param>
            <param name="IDictionary">A IDictionary of type TKey and TValue</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IPropertiesExtensions.Remove``2(de.ahzf.Illias.Commons.Collections.IProperties{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Remove the given KeyValuePair.
            </summary>
            <param name="KeyValuePair">A KeyValuePair.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertyAddingEventHandler`2">
            <summary>
            An event handler called whenever a property value will be added.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be added.</param>
            <param name="Value">The value of the property to be added.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertyAddedEventHandler`2">
            <summary>
            An event handler called whenever a property value was added.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the added property.</param>
            <param name="Value">The value of the added property.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertyChangingEventHandler`2">
            <summary>
            An event handler called whenever a property value will be changed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be changed.</param>
            <param name="OldValue">The old value of the property to be changed.</param>
            <param name="NewValue">The new value of the property to be changed.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertyChangedEventHandler`2">
            <summary>
            An event handler called whenever a property value was changed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the changed property.</param>
            <param name="OldValue">The old value of the changed property.</param>
            <param name="NewValue">The new value of the changed property.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertyRemovingEventHandler`2">
            <summary>
            An event handler called whenever a property will be removed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the property to be removed.</param>
            <param name="Value">The value of the property to be removed.</param>
            <param name="Vote">A veto vote is a simple way to ask multiple event subscribers if the edge should be added or not.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertyRemovedEventHandler`2">
            <summary>
            An event handler called whenever a property was removed.
            </summary>
            <param name="Sender">The sender of this event.</param>
            <param name="Key">The key of the removed property.</param>
            <param name="Value">The value of the removed property.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.IProperties`2">
            <summary>
            A generic interface maintaining a collection of key/value properties
            within the given datastructure.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IProperties`2.SetProperty(`0,`1)">
            <summary>
            Add a KeyValuePair to the graph element.
            If a value already exists for the given key, then the previous value is overwritten.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IProperties`2.Remove(`0)">
            <summary>
            Removes all KeyValuePairs associated with the given key.
            </summary>
            <param name="Key">A key.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IProperties`2.Remove(`0,`1)">
            <summary>
            Remove the given key and value pair.
            </summary>
            <param name="Key">A key.</param>
            <param name="Value">A value.</param>
            <returns>The value associated with that key prior to the removal.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IProperties`2.Remove(de.ahzf.Illias.Commons.KeyValueFilter{`0,`1})">
            <summary>
            Remove all KeyValuePairs specified by the given KeyValueFilter.
            </summary>
            <param name="KeyValueFilter">A delegate to remove properties based on their keys and values.</param>
            <returns>A enumeration of all key/value pairs removed by the given KeyValueFilter before their removal.</returns>
        </member>
        <member name="E:de.ahzf.Illias.Commons.Collections.IProperties`2.OnPropertyAdding">
            <summary>
            Called whenever a property value will be added.
            </summary>
        </member>
        <member name="E:de.ahzf.Illias.Commons.Collections.IProperties`2.OnPropertyAdded">
            <summary>
            Called whenever a property value was added.
            </summary>
        </member>
        <member name="E:de.ahzf.Illias.Commons.Collections.IProperties`2.OnPropertyChanging">
            <summary>
            Called whenever a property value will be changed.
            </summary>
        </member>
        <member name="E:de.ahzf.Illias.Commons.Collections.IProperties`2.OnPropertyChanged">
            <summary>
            Called whenever a property value was changed.
            </summary>
        </member>
        <member name="E:de.ahzf.Illias.Commons.Collections.IProperties`2.OnPropertyRemoving">
            <summary>
            Called whenever a property value will be removed.
            </summary>
        </member>
        <member name="E:de.ahzf.Illias.Commons.Collections.IProperties`2.OnPropertyRemoved">
            <summary>
            Called whenever a property value was removed.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IComparableExtensions">
            <summary>
            Extensions to the IComparable interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IComparableExtensions.IsLessThan``1(``0,``0)">
            <summary>
            Checks if the first value is less than the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is less than the second value; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IComparableExtensions.IsLessThanOrEquals``1(``0,``0)">
            <summary>
            Checks if the first value is less than or equals the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is less than or equals the second value; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IComparableExtensions.IsLargerThan``1(``0,``0)">
            <summary>
            Checks if the first value is larger than the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is larger than the second value; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IComparableExtensions.IsLargerThanOrEquals``1(``0,``0)">
            <summary>
            Checks if the first value is larger than or equals the second value.
            </summary>
            <param name="Value1">A value of type T.</param>
            <param name="Value2">A value of type T.</param>
            <returns>True if the first value is larger than or equals the second value; False otherwise.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.ILabel`1">
            <summary>
            Provides a label of something.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.ILabel`1.Label">
            <summary>
            Provides a label of something.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IDescription`1">
            <summary>
            Provides a description of something.
            </summary>
            <typeparam name="T">The type of the description.</typeparam>
        </member>
        <member name="P:de.ahzf.Illias.Commons.IDescription`1.Description">
            <summary>
            Provides a description of something.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.TypeHelpers">
            <summary>
            TypeHelpers
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.TypeHelpers.IsAnonymousType(System.Type)">
            <summary>
            Is the given type an anonymous type?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.SystemId">
            <summary>
            A SystemId is unique identificator for a single system within
            a larger distributed system.
            </summary>    
        </member>
        <member name="F:de.ahzf.Illias.Commons.SystemId._Id">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor">
            <summary>
            Generates a new SystemId based on a GUID.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(System.Int32)">
            <summary>
            Generates a SystemId based on the content of an Int32.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(System.UInt32)">
            <summary>
            Generates a SystemId based on the content of an UInt32.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(System.Int64)">
            <summary>
            Generates a SystemId based on the content of an Int64.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(System.UInt64)">
            <summary>
            Generates a SystemId based on the content of an UInt64.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(System.String)">
            <summary>
            Generates a SystemId based on the content of String.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(System.Uri)">
            <summary>
            Generates a SystemId based on the content of Uri.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.#ctor(de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Generates a SystemId based on the content of SystemId.
            </summary>
            <param name="SystemId">A SystemId</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.op_Equality(de.ahzf.Illias.Commons.SystemId,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.op_Inequality(de.ahzf.Illias.Commons.SystemId,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.op_LessThan(de.ahzf.Illias.Commons.SystemId,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.op_LessThanOrEqual(de.ahzf.Illias.Commons.SystemId,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.op_GreaterThan(de.ahzf.Illias.Commons.SystemId,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.op_GreaterThanOrEqual(de.ahzf.Illias.Commons.SystemId,de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId1">A SystemId.</param>
            <param name="SystemId2">Another SystemId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.CompareTo(de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SystemId">An object to compare with.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.Equals(de.ahzf.Illias.Commons.SystemId)">
            <summary>
            Compares two SystemIds for equality.
            </summary>
            <param name="SystemId">A SystemId to compare with.</param>
            <returns>True if both match; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.SystemId.ToString">
            <summary>
            Return a string represtentation of this object.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.SystemId.Length">
            <summary>
            Returns the length of the identificator.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.SystemId.NewSystemId">
            <summary>
            Generate a new SystemId.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.TypeExtensions">
            <summary>
            Extensions to the String class.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.TypeExtensions.GetRecursiveInterfaces(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Traverses the interface inheritance tree and collects all found interfaces.
            </summary>
            <param name="Interface">The starting innterface.</param>
            <param name="AllInterfaces">A list of all interfaces found.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IIdGenerator`1">
            <summary>
            An interface for classes generating Ids.
            </summary>
            <typeparam name="TId">The type of the Ids.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IIdGenerator`1.NewId(System.Func{`0,System.Boolean})">
            <summary>
            Generate a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IIdentifier`1">
            <summary>
            Provides a generic identifier that is unique for its implementing class.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="P:de.ahzf.Illias.Commons.IIdentifier`1.Id">
            <summary>
            A generic identifier that is unique to its implementing class.
            All vertices, edges and hyper edges of a graph must have unique identifiers.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IEnumerableExtensions">
            <summary>
            Extensions to the IEnumerable interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.StdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of the given enumeration of doubles.
            </summary>
            <param name="IEnumerable">An enumeration of Doubles.</param>
            <returns>The stddev of the given enumeration of doubles.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.AverageAndStdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation of the given enumeration of doubles.
            </summary>
            <param name="IEnumerable">An enumeration of Doubles.</param>
            <returns>The mean and stddev of the given enumeration of doubles.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls the given delegate for each element of the enumeration,
            but does not fail if any parameter is null.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``1},``0,System.Action{``0,``1})">
            <summary>
            Calls the given delegate for each element of the enumeration.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration of type T.</param>
            <param name="Action">An action to call for each element of the enumeration.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt32)">
            <summary>
            Takes the given number of elements from the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.UInt64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the given number of elements in the enumeration.
            </summary>
            <typeparam name="T">The type fo the enumeration.</typeparam>
            <param name="IEnumerable">An enumeration.</param>
            <param name="Count">The number of elements to skip.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.When``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Return the given object, when the condition delegate returns true.
            Otherwise return default(T).
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="Object">An object.</param>
            <param name="ConditionDelegate">A delegate for checking some condition.</param>
            <returns>The object if the condition is true; default(T) otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IEnumerableExtensions.ConsumeAll``1(System.Collections.IEnumerator)">
            <summary>
            Consume all elements of the given enumerator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="Enumerator">An IEnumerator.</param>
            <returns>An enumerable of T.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.AutoDiscovery`1">
            <summary>
            A factory which uses reflection to generate a apropriate
            implementation of T for you.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscovery`1.#ctor">
            <summary>
            Create a new AutoDiscovery instance and start the discovery.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscovery`1.#ctor(System.Boolean,System.Func{`0,System.String})">
            <summary>
            Create a new AutoDiscovery instance. An automatic discovery
            can be avoided.
            </summary>
            <param name="Autostart">Automatically start the reflection process.</param>
            <param name="IdentificatorFunc">A transformation delegate to provide an unique identification for every matching class.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscovery`1.FindAndRegister(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{`0,System.String})">
            <summary>
            Searches all matching files at the given paths for classes implementing the interface &lt;T&gt;.
            </summary>
            <param name="ClearTypeDictionary">Clears the TypeDictionary before adding new implementations.</param>
            <param name="Paths">An enumeration of paths to search for implementations.</param>
            <param name="FileExtensions">A enumeration of file extensions for filtering.</param>
            <param name="IdentificatorFunc">A transformation delegate to provide an unique identification for every matching class.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscovery`1.TryGetInstance(System.String,`0@)">
            <summary>
            Attempts to get an instance associated with the identificator.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.AutoDiscovery`1.SearchingFor">
            <summary>
            Returns the Name of the interface T.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.AutoDiscovery`1.RegisteredNames">
            <summary>
            Returns an enumeration of the names of all registered types of T.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.AutoDiscovery`1.RegisteredTypes">
            <summary>
            Returns an enumeration of activated instances of all registered types of T.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.AutoDiscovery`1.Count">
            <summary>
            Returns the number of registered implementations of the interface T.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.MajorityVote">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% is okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.MajorityVote.#ctor">
            <summary>
            A majority vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If a majority of >50% is okay with it, the result of the vote will be true.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.GroupedCollection`3">
            <summary>
            A collection of values with the additional possibility
            to group these values.
            </summary>
            <typeparam name="TKey">The type of the collection keys.</typeparam>
            <typeparam name="TValue">The type of the collection values.</typeparam>
            <typeparam name="TGroup">The type of the collection groups.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.#ctor">
            <summary>
            Create a new grouped collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.TryAddValue(`0,`1,`2)">
            <summary>
            Tries to add a KeyValueGroupTriple to the collection.
            </summary>
            <param name="Key">The key of the triple.</param>
            <param name="Value">The value of the triple.</param>
            <param name="Group">The group of the triple.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="Key">A key.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.ContainsGroup(`2)">
            <summary>
            Determines whether the collection contains the specified group.
            </summary>
            <param name="Group">A group.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.Count">
            <summary>
            The total number of values in the grouped collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.Count(`2)">
            <summary>
            The number of values in the given group collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.TryGetByKey(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <returns>True, if the key was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.TryGetByGroup(`2,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Attempts to get the values associated with the specified group.
            </summary>
            <param name="Group">The group.</param>
            <param name="Values">An enumeration of values.</param>
            <returns>True, if the group was found in the grouped collection; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.TryRemoveValue(`0,`1,`2)">
            <summary>
            Attempts to remove the given value with the specified
            key and group from the grouped collection.
            </summary>
            <param name="Key">The key of the value.</param>
            <param name="Value">The value to remove.</param>
            <param name="Group">The group of the value.</param>
            <returns>True if success; false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.Clear">
            <summary>
            Removes all keys, values and groups
            from the grouped collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.GetEnumerator">
            <summary>
            Return an enumerator for the grouped collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.GroupedCollection`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an enumerator for the grouped collection.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.ItemFilter`1">
            <summary>
            A delegate to filter items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="Item">An item.</param>
            <returns>True if the item should be returned; False otherwise.</returns>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IdGenerator_UInt64">
            <summary>
            Generate a new Id.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IdGenerator_UInt64.NewId(System.Func{System.UInt64,System.Boolean})">
            <summary>
            Generate and return a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IdGenerator_String">
            <summary>
            Generate a new Id.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IdGenerator_String.NewId(System.Func{System.String,System.Boolean})">
            <summary>
            Generate and return a new Id.
            </summary>
            <param name="UniquenessCheckDelegate">A delegate to check the uniqueness of the generated identification.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.StringBuilderExtentions">
            <summary>
            Extensions to the StringBuilder class.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IMap`2">
            <summary>
            Provides a generic mutable map/dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.PropertiesException">
            <summary>
            An exception during property processing occurred!
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.PropertiesException.#ctor(System.String,System.Exception)">
            <summary>
            An exception during property processing occurred!
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.IdentificationChangeException">
            <summary>
            Changing the Id property is not allowed.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.IdentificationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new IdentificationChangeException when
            someone tries to change the identification.
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Collections.RevIdentificationChangeException">
            <summary>
            Changing the RevId property is not allowed.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Collections.RevIdentificationChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new IdentificationChangeException when
            someone tries to change the revision identification.
            </summary>
            <param name="Message">The message that describes the error.</param>
            <param name="InnerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IDictionaryInitializer`2">
            <summary>
            A delegate for IDictionary initializing.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="T:de.ahzf.Illias.Commons.AutoDiscoveryException">
            <summary>
            The class for all errors within the AutoDiscovery&lt;T&gt; class
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscoveryException.#ctor">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscoveryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class with a
            specified error message.
            </summary>
            <param name="myMessage">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.AutoDiscoveryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AutoDiscoveryException class with a
            specified error message and a reference to the inner exception that is
            the cause of this exception.
            </summary>
            <param name="myMessage">The error message that explains the reason for the exception.</param>
            <param name="myInnerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Votes.VetoVote">
            <summary>
            A veto vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If anyone is unhappy with it, the result of the vote will be false.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.VetoVote.#ctor">
            <summary>
            A veto vote is a simple way to ask multiple event subscribers
            if an action, e.g. AddVertex(...) should be processed or suspended.
            If anyone is unhappy with it, the result of the vote will be false.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Votes.VetoVote.Veto">
            <summary>
            Veto
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Endianness.EndiannessHell">
            <summary>
            Some utilities to help in the hell of endianness.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Endianness.EndiannessHell.SwapBytes(System.Int16)">
            <summary>
            Swap the byte representation of the given Int16 value.
            </summary>
            <param name="Value">A Int16.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Endianness.EndiannessHell.SwapBytes(System.UInt16)">
            <summary>
            Swap the byte representation of the given UInt16 value.
            </summary>
            <param name="Value">A UInt16.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Endianness.EndiannessHell.SwapBytes(System.Int32)">
            <summary>
            Swap the byte representation of the given Int32 value.
            </summary>
            <param name="Value">A Int32.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Endianness.EndiannessHell.SwapBytes(System.UInt32)">
            <summary>
            Swap the byte representation of the given UInt32 value.
            </summary>
            <param name="Value">A UInt32.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Endianness.EndiannessHell.SwapBytes(System.Int64)">
            <summary>
            Swap the byte representation of the given Int64 value.
            </summary>
            <param name="Value">A Int64.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Endianness.EndiannessHell.SwapBytes(System.UInt64)">
            <summary>
            Swap the byte representation of the given UInt64 value.
            </summary>
            <param name="Value">A UInt64.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.ImmutableMap`2">
            <summary>
            A simple implementation of a immutable map.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:de.ahzf.Illias.Commons.ImmutableMap`2.#ctor">
            <summary>
            Creates a simple implementation of a immutable map.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.ImmutableMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a simple implementation of a immutable map.
            </summary>
            <param name="InternalIDictionary">An user-defined internal map.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.Measurement`1">
            <summary>
            This class represents a timestamp value pair of a measurement.
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Measurement`1.Timestamp">
            <summary>
            The timestamp of the measurement;
            </summary>
        </member>
        <member name="F:de.ahzf.Illias.Commons.Measurement`1.Value">
            <summary>
            The value of the measurement;
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.Measurement`1.#ctor(System.DateTime,`0)">
            <summary>
            Create a new timestamp value pair of a measurement.
            </summary>
            <param name="Timestamp">The timestamp of the measurement.</param>
            <param name="Value">The value of the measurement.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.IntegerExtensions">
            <summary>
            Extensions methods for integers.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.Int32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.UInt32,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.Int64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.UInt64,System.Action)">
            <summary>
            Loop for the given number of iterations while
            calling the given delegate.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.Int32,System.Action{System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.Int64,System.Action{System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.UInt64,System.Action{System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration as parameter.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.UInt32,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.IntegerExtensions.Loop(System.UInt64,System.Action{System.UInt64,System.UInt64})">
            <summary>
            Loop for the given number of iterations while calling
            the given delegate with the current iteration and
            total number of iterations as parameters.
            </summary>
            <param name="Loops">The number of iterations.</param>
            <param name="Do">A delegate to call.</param>
        </member>
        <member name="T:de.ahzf.Illias.Commons.CommandLineParserOption">
            <summary>
            A fluent interface to add command line parser options.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.#ctor(de.ahzf.Illias.Commons.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.#ctor(System.Char,de.ahzf.Illias.Commons.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="ShortOption">The short option.</param>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.#ctor(System.String,de.ahzf.Illias.Commons.CommandLineParser)">
            <summary>
            Create a new fluent interface to add command line parser options.
            </summary>
            <param name="LongOption">The long option.</param>
            <param name="CommandLineParser">The command line parser.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.Short(System.Char)">
            <summary>
            Set the short option.
            </summary>
            <param name="ShortOption">The short option.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.Long(System.String)">
            <summary>
            Set the long option.
            </summary>
            <param name="LongOption">The long option.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.Verify(System.String)">
            <summary>
            Set an optional regular expression for verification.
            </summary>
            <param name="RegularExpression">A regular expression for verification.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.Verify(System.Func{System.String,System.Boolean})">
            <summary>
            Set an optional regular expression for verification.
            </summary>
            <param name="Delegate">A delegate for verification.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.Do(System.Action{System.String})">
            <summary>
            Set the action delegate.
            </summary>
            <param name="Delegate">What to do with the value of the short and/or long option.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParserOption.Apply">
            <summary>
            Apply/store this command line parser option.
            </summary>
            <returns></returns>
        </member>
        <member name="P:de.ahzf.Illias.Commons.CommandLineParserOption.ShortOption">
            <summary>
            The short option.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.CommandLineParserOption.LongOption">
            <summary>
            The long option.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.CommandLineParserOption.RegularExpression">
            <summary>
            An optional regular expression for verification.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.CommandLineParserOption.Verification">
            <summary>
            An optional delegate for verification.
            </summary>
        </member>
        <member name="P:de.ahzf.Illias.Commons.CommandLineParserOption.Action">
            <summary>
            The action delegate.
            </summary>
        </member>
        <member name="T:de.ahzf.Illias.Commons.CommandLineParser">
            <summary>
            A command line parser.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.#ctor">
            <summary>
            Create a new command line parser.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.AddOption">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.AddShortOption(System.Char)">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
            <param name="ShortOption">Add a short option.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.AddLongOption(System.String)">
            <summary>
            Create a new fluent interface to create command line parser options.
            </summary>
            <param name="LongOption">Add a long option.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.AddOption(System.Char,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given character,
            e.g. "o" for a "-o" command line option.
            </summary>
            <param name="ShortOption">A short option.</param>
            <param name="Delegate">What to do with the value of the character option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.AddOption(System.String,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given string,
            e.g. "output" for a "--output" command line option.
            </summary>
            <param name="LongOption">A long option.</param>
            <param name="Delegate">What to do with the value of the string option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.AddOption(System.Char,System.String,System.Action{System.String},System.String)">
            <summary>
            Add the given action for the given character and string,
            e.g. "o" and "output" for a "-o" and "--output" command line option.
            </summary>
            <param name="ShortOption">A short option.</param>
            <param name="LongOption">A long option.</param>
            <param name="Delegate">What to do with the value of the short and/or long option.</param>
            <param name="Verification">An optional regular expression for verification.</param>
        </member>
        <member name="M:de.ahzf.Illias.Commons.CommandLineParser.Parse(System.String[])">
            <summary>
            Parse the given array of arguments.
            </summary>
            <param name="Arguments">An array of arguments.</param>
        </member>
    </members>
</doc>
