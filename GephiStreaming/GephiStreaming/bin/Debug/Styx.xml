<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Styx</name>
    </assembly>
    <members>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor">
            <summary>
            A sensor returning random numbers.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor`1">
            <summary>
            A sensor returning random numbers.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2">
            <summary>
            The abstract sensor.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the returned sensor data.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.ISensor`2">
            <summary>
            The generic ISensor interface with the type of the measureds values.
            </summary>
            <typeparam name="TId">The type of the unique sensor identification.</typeparam>
            <typeparam name="TValue">The type of the measured values.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.ISensor`1">
            <summary>
            The common generic ISensor interface.
            </summary>
            <typeparam name="TId">The type of the unique sensor identification.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.ISensor">
            <summary>
            The common ISensor interface.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.Name">
            <summary>
            The well-known name of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.ValueUnit">
            <summary>
            The unit of the value (m, m², °C, °F, MBytes, ...).
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.IsActive">
            <summary>
            Whether this sensor is active or passive.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.MeasurementIntervall">
            <summary>
            The intervall will throttle the measurements of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.Now">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.InitializationTimestamp">
            <summary>
            The timestamp when this sensor was initialized.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.LastMeasurementAt">
            <summary>
            The timestamp of the last time this sensor invoked a measurement.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor.NextMeasurementAt">
            <summary>
            The timestamp of the next time this sensor invokes a measurement.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor`2.CurrentValue">
            <summary>
            The current value of this sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.ISensor`2.TimestampedValue">
            <summary>
            The current value of this sensor and its measurement timestamp.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2._LastMeasurementAt">
            <summary>
            Shadow copy of the LastMeasurementAt property
            to save the value for the next measurement.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2._Current">
            <summary>
            The current value of the sensor.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.#ctor(`0,System.String,System.String)">
            <summary>
            Creates a new sensor having the given Id and name.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an IEnumerator.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.GetEnumerator">
            <summary>
            Return an IEnumerator&lt;TValue&gt;.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.MoveNext">
            <summary>
            Take a new sensor measurement.
            </summary>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Reset">
            <summary>
            Reset the sensor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.op_Equality(de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1},de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1})" -->
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.op_Inequality(de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1},de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1})" -->
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.op_LessThan(de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1},de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1})" -->
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.op_LessThanOrEqual(de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1},de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1})" -->
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.op_GreaterThan(de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1},de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1})" -->
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.op_GreaterThanOrEqual(de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1},de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor{`0,`1})" -->
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Equals(`0)">
            <summary>
            Compares the Ids of two sensors for equality.
            </summary>
            <param name="OtherId">Another sensor Id.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Equals(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1})">
            <summary>
            Compares two sensors for equality.
            </summary>
            <param name="OtherChargePoint">Another sensor.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.CompareTo(System.Object)">
            <summary>
            Compares the Ids of two sensors.
            </summary>
            <param name="Object">Another sensor Id.</param>
            <returns>0 if equal, -1, 1 otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.CompareTo(`0)">
            <summary>
            Compares the Ids of two sensors.
            </summary>
            <param name="OtherId">Another sensor Id.</param>
            <returns>0 if equal, -1, 1 otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.CompareTo(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1})">
            <summary>
            Compares two sensors.
            </summary>
            <param name="OtherSensor">Another sensor.</param>
            <returns>0 if equal, -1, 1 otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.ToString">
            <summary>
            Return a string represtentation of this object.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Dispose">
            <summary>
            Dispose this pbject.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Id">
            <summary>
            A unique identification of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Name">
            <summary>
            The user-friendly name of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Description">
            <summary>
            An description of this sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.ValueUnit">
            <summary>
            The unit of the value (m, m², °C, °F, MBytes, ...).
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.IsActive">
            <summary>
            Whether this sensor is active or passive.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.MeasurementIntervall">
            <summary>
            The intervall will throttle the measurements of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.InitializationTimestamp">
            <summary>
            The timestamp when this sensor was initialized.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Now">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.LastMeasurementAt">
            <summary>
            The timestamp of the last time this sensor invoked a measurement.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.NextMeasurementAt">
            <summary>
            The timestamp of the next time this sensor will invoked a measurement.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.Current">
            <summary>
            The current value of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.CurrentValue">
            <summary>
            Invokes a new measurement and return the current value of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.AbstractSensor`2.TimestampedValue">
            <summary>
            The current value of this sensor and its measurement timestamp.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor`1._Random">
            <summary>
            The source of randomness.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor returning random numbers.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor`1.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor.#ctor(System.String)">
            <summary>
            A sensor returning random numbers.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor returning random numbers.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.RandomSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor returning random numbers.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ComparisonFilter`1">
            <summary>
            A delegate for comparisions.
            </summary>
            <typeparam name="TValue">The type of the item to compare.</typeparam>
            <param name="Expected">The expected value of the item.</param>
            <returns>True if matches; False otherwise.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.APropertyFilterPipe`3">
            <summary>
            An abstract class for filtering objects by their properties.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="S">The type of the objects to filter.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractFilterPipe`1">
            <summary>
            An AbstractFilterPipe provides most of the functionality that is repeated
            in every instance of a FilterPipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S">The type of the filtered objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractPipe`2">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IPipe`2">
            <summary>
            The generic interface for any single-element pipe implementation.
            Such a pipe takes/consumes objects of type S and returns/emits objects of type E.
            S refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IStartPipe`1">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IStartPipe">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe.SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe.SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe.SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`1.SetSource(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`1.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`1.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IEndPipe`1">
            <summary>
            An interface for the element emitting part of a pipe.
            Pipes implementing just this interface do not neccessarily
            consume elements, but e.g. might receive them via network.
            </summary>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IEndPipe">
            <summary>
            An interface for the element emitting part of a pipe.
            Pipes implementing just this interface do not neccessarily
            consume elements, but e.g. might receive them via network.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.IEndPipe.Path">
            <summary>
            Returns the path traversed to arrive at the current result of the pipe.
            </summary> 
            <returns>A List of all of the objects traversed for the current iterator position of the pipe.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IPipe">
            <summary>
            The non-generic interface for any pipe implementation.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`2._InputEnumerator">
            <summary>
            The internal enumerator of the collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`2._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.#ctor">
            <summary>
            Creates a AbstractPipe pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new AbstractPipe using the elements emitted
            by the given IEnumerator as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.SetSource(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`2.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IFilterPipe`1">
            <summary>
            A FilterPipe is much like the IdentityPipe, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractFilterPipe`1.#ctor">
            <summary>
            Creates a AbstractFilterPipe pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new AbstractFilterPipe using the elements emitted
            by the given IEnumerator as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.APropertyFilterPipe`3.#ctor(`0,de.ahzf.Vanaheimr.Styx.ComparisonFilter{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Creates a new PropertyFilterPipe.
            </summary>
            <param name="Key">The property key.</param>
            <param name="ComparisonFilter">The comparison filter to use.</param>
            <param name="IEnumerable">An IEnumerable&lt;...&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;...&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.APropertyFilterPipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.APropertyFilterPipe`4">
            <summary>
            An abstract class for filtering objects by their properties.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="S">The type of the objects to filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.APropertyFilterPipe`4.#ctor(`0,de.ahzf.Vanaheimr.Styx.ComparisonFilter{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Creates a new PropertyFilterPipe.
            </summary>
            <param name="Key">The property key.</param>
            <param name="ComparisonFilter">The comparison filter to use.</param>
            <param name="IEnumerable">An IEnumerable&lt;...&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;...&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.APropertyFilterPipe`4.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1">
            <summary>
            ExhaustiveMergePipe will drain its first internal pipe, then its second,
            so on until all internal pipes are drained.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IMetaPipe`2">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IMetaPipe">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.IMetaPipe`2.Pipes">
            <summary>
            A list of all wrapped pipes
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe})">
            <summary>
            Creates a new ExhaustiveMergePipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe[])">
            <summary>
            Creates a new ExhaustiveMergePipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1.Reset">
            <summary>
            A pipe may maintain state. Reset is used to remove state.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ExhaustiveMergePipe`1.Pipes">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PipesException">
            <summary>
            A general pipes exception.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PipesException.#ctor">
            <summary>
            A general pipes exception.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PipesException.#ctor(System.String)">
            <summary>
            A general pipes exception.
            </summary>
            <param name="myMessage">An additional message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.NoSuchElementException">
            <summary>
            No such element could be found.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NoSuchElementException.#ctor">
            <summary>
            No such element could be found.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NoSuchElementException.#ctor(System.String)">
            <summary>
            No such element could be found.
            </summary>
            <param name="myMessage">An additional message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IllegalStateException">
            <summary>
            An illegal state had been reached.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IllegalStateException.#ctor(System.String)">
            <summary>
            An illegal state had been reached.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ANewArrow`2">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ANewArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
            <returns>True if the message should be forwarded; False otherwise.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.SensorId">
            <summary>
            A SensorId is the unique identificator of any sensor.
            </summary>    
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.SensorId._Id">
            <summary>
            The internal identification.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor">
            <summary>
            Generates a new SensorId based on a GUID.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(System.Int32)">
            <summary>
            Generates a SensorId based on the content of an Int32.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(System.UInt32)">
            <summary>
            Generates a SensorId based on the content of an UInt32.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(System.Int64)">
            <summary>
            Generates a SensorId based on the content of an Int64.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(System.UInt64)">
            <summary>
            Generates a SensorId based on the content of an UInt64.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(System.String)">
            <summary>
            Generates a SensorId based on the content of String.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(System.Uri)">
            <summary>
            Generates a SensorId based on the content of Uri.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Generates a SensorId based on the content of SensorId.
            </summary>
            <param name="SensorId">A SensorId</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.op_Equality(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId1">A SensorId.</param>
            <param name="SensorId2">Another SensorId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.op_Inequality(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId1">A SensorId.</param>
            <param name="SensorId2">Another SensorId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.op_LessThan(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId1">A SensorId.</param>
            <param name="SensorId2">Another SensorId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.op_GreaterThan(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId1">A SensorId.</param>
            <param name="SensorId2">Another SensorId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.op_LessThanOrEqual(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId1">A SensorId.</param>
            <param name="SensorId2">Another SensorId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.op_GreaterThanOrEqual(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId1">A SensorId.</param>
            <param name="SensorId2">Another SensorId.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.CompareTo(de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.Equals(de.ahzf.Vanaheimr.Styx.Sensors.SensorId)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="SensorId">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.ToString">
            <summary>
            Return a string represtentation of this object.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.Length">
            <summary>
            Returns the length of the identificator.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.SensorId.NewSensorId">
            <summary>
            Generate a new SensorId.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.Sensor`2">
            <summary>
            A generic sensor.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the returned sensor data.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Active.Sensor`2.IEnumerator">
            <summary>
            The internal TValue enumerator.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.Sensor`2.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1})">
            <summary>
            A sensor based on another ISensor&lt;TId, TValue&gt;.
            All needed information will be taken from the wrapped sensor.
            </summary>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.Sensor`2.#ctor(System.Collections.Generic.IEnumerable{`1},`0,System.String,System.String)">
            <summary>
            An  sensor.
            </summary>
            <param name="IEnumerable">An enumeration of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.Sensor`2.#ctor(System.Collections.Generic.IEnumerator{`1},`0,System.String,System.String)">
            <summary>
            An  sensor.
            </summary>
            <param name="IEnumerator">An enumerator of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.Sensor`2.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.ISensorExtensions">
            <summary>
            Extension methods for the ISensor interfaces.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ISensorExtensions.ToSensor``2(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{``0,``1})">
            <summary>
            Creates a new sensor based on the given ISensor&lt;TId, TValue&gt;.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <returns>A new ISensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ISensorExtensions.ToActiveSensor``2(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{``0,``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor based on the given ISensor&lt;TId, TValue&gt;.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ISensorExtensions.ToActiveSensor``2(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{``0,``1},de.ahzf.Vanaheimr.Styx.MessageRecipient{``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor based on the given ISensor&lt;TId, TValue&gt;.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ISensorExtensions.ToActiveSensor``2(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{``0,``1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor based on the given ISensor&lt;TId, TValue&gt;.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ISensorExtensions.WithTimestamp``2(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{``0,``1})">
            <summary>
            Creates a new TimestampedSensor based on the given ISensor&lt;TId, TValue&gt;.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <returns>A new TimestampedSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PipelineDefinition`2">
            <summary>
            A definition delegate for pipelines.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <param name="Element">A source element.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Pipeline`2">
            <summary>
            A Pipeline is a linear composite of Pipes.
            Pipeline takes a List of Pipes and joins them according to their order as specified by their location in the List.
            It is important to ensure that the provided ordered Pipes can connect together.
            That is, that the output of the n-1 Pipe is the same as the input to n Pipe.
            Once all provided Pipes are composed, a Pipeline can be treated like any other Pipe.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.#ctor">
            <summary>
            Constructs a pipeline from the provided pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.#ctor(de.ahzf.Vanaheimr.Styx.PipelineDefinition{`0,`1})">
            <summary>
            Constructs a pipeline based on the given PipelineDefinition&lt;S, E&gt;.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe})">
            <summary>
            Constructs a pipeline from the provided pipes.
            The ordered list determines how the pipes will be chained together.
            When the pipes are chained together, the start of pipe n is the end of pipe n-1.
            </summary>
            <param name="IPipes">The ordered list of pipes to chain together into a pipeline</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.#ctor(de.ahzf.Vanaheimr.Styx.IPipe[])">
            <summary>
            Constructs a pipeline from the provided pipes.
            The ordered array determines how the pipes will be chained together.
            When the pipes are chained together, the start of pipe n is the end of pipe n-1.
            </summary>
            <param name="IPipes">the ordered array of pipes to chain together into a pipeline</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.SetPipes(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe})">
            <summary>
            Use when extending Pipeline and setting the pipeline chain without making use of the constructor.
            </summary>
            <param name="IPipes">the ordered list of pipes to chain together into a pipeline.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.SetPipes(de.ahzf.Vanaheimr.Styx.IPipe[])">
            <summary>
            Use when extending Pipeline and setting the pipeline chain without making use of the constructor.
            </summary>
            <param name="IPipes">the ordered array of pipes to chain together into a pipeline.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.SetSource(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator as input.
            </summary>
            <param name="myIEnumerator">An IEnumerator as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted by the given IEnumerable&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="myIEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.Dispose">
            <summary>
            Disposes this pipeline.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Pipeline`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Pipeline`2.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Pipeline`2.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Pipeline`2.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PipeHelper">
            <summary>
            PipeHelper provides a collection of static methods that are useful when dealing with Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PipeHelper.FillCollection``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Fill the given collection with the elements emitted by the IEnumerator&lt;T&gt;.
            </summary>
            <typeparam name="T">The type of the emitted objects.</typeparam>
            <param name="myIEnumerator">An IEnumerator&lt;T&gt;.</param>
            <param name="myICollection">An ICollection&lt;T&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PipeHelper.Counter``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Counts the elements emitted by the IEnumerator&lt;T&gt;.
            </summary>
            <typeparam name="T">The type of the emitted objects.</typeparam>
            <param name="myIEnumerator">An IEnumerator&lt;T&gt;.</param>
            <returns>The number of elements emitted by the IEnumerator&lt;T&gt;.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ToLowerPipe">
            <summary>
            The ToUpperPipe converts all incoming strings to lowercase.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToLowerPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.MinMaxPipe`1">
            <summary>
            The MinMaxPipe produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`4">
            <summary>
            This SideEffectPipe will produce two side effects which can
            be retrieved by the SideEffect properties.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectPipe">
            <summary>
            This SideEffectPipe will produce a side effect which can be
            retrieved by the SideEffect property.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`4.SideEffect1">
            <summary>
            The first SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`4.SideEffect2">
            <summary>
            The second SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4._SideEffect1">
            <summary>
            The SideEffect produced by this Pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4._SideEffect2">
            <summary>
            The SideEffect produced by this Pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor">
            <summary>
            Creates a new AbstractSideEffectPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new AbstractSideEffectPipe using the elements
            emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4.SideEffect1">
            <summary>
            The first SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`4.SideEffect2">
            <summary>
            The second SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxPipe`1.#ctor(`0,`0,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            The MinMaxPipe produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;Double&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;Double&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxPipe`1.ToString">
            <summary>
            Returns a string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.MinMaxPipe`1.Min">
            <summary>
            The minimum of the passed values.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.MinMaxPipe`1.Max">
            <summary>
            The maximum of the passed values.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncFilterPipe`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterPipe`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Creates a new FuncFilterPipe using the given Func&lt;S, E&gt;.
            </summary>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IPipe`3">
            <summary>
            The generic interface for any two-element pipe implementation.
            Such a pipe takes/consumes objects of type S1 and S2 and returns/emits objects of type E.
            S1 and S2 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IStartPipe`2">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`2.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`2.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`2.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`2.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`2.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`2.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IPipe`4">
            <summary>
            The generic interface for any three-element pipe implementation.
            Such a pipe takes/consumes objects of type S1, S2 and S3 and returns/emits objects of type E.
            S1, S2 and S3 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IStartPipe`3">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`3.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IPipe`5">
            <summary>
            The generic interface for any four-element pipe implementation.
            Such a pipe takes/consumes objects of type S1, S2, S3 and S4 and returns/emits objects of type E.
            S1, S2, S3 and S4 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IStartPipe`4">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource4(`3)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSource4(System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`4.SetSourceCollection4(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IPipe`6">
            <summary>
            The generic interface for any five-element pipe implementation.
            Such a pipe takes/consumes objects of type S1, S2, S3, S4 and S5 and returns/emits objects of type E.
            S1, S2, S3, S4 and S5 refers to <i>starts</i> and the E refers to <i>ends</i>.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="S5">The type of the fifth consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IStartPipe`5">
            <summary>
            An interface for the element consuming part of a pipe.
            Pipes implementing just this interface do not neccessarily
            emit elements, but e.g. might send them via network.
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="S5">The type of the fifth consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource4(`3)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource5(`4)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource4(System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSource5(System.Collections.Generic.IEnumerator{`4})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S5&gt; as input.
            </summary> 
            <param name="IEnumerator">An IEnumerator&lt;S5&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection4(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S4&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IStartPipe`5.SetSourceCollection5(System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S5&gt; as input.
            </summary> 
            <param name="IEnumerable">An IEnumerable&lt;S5&gt; as element source.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractPipe`3">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`3._InternalEnumerator1">
            <summary>
            The internal enumerator of the first collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`3._InternalEnumerator2">
            <summary>
            The internal enumerator of the second collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`3._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.#ctor">
            <summary>
            Creates a new abstract pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerators as input.
            </summary>
            <param name="IEnumerator1">An IEnumerator&lt;S1&gt; as element source.</param>
            <param name="IEnumerator2">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="IEnumerable1">An IEnumerable&lt;S1&gt; as element source.</param>
            <param name="IEnumerable2">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerator">An IEnumerator as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.Reset">
            <summary>
            Sets the enumerators to their initial positions, which
            is before the first element in the collections.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`3.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractPipe`4">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`4._InternalEnumerator1">
            <summary>
            The internal enumerator of the first collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`4._InternalEnumerator2">
            <summary>
            The internal enumerator of the second collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`4._InternalEnumerator3">
            <summary>
            The internal enumerator of the third collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`4._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.#ctor">
            <summary>
            Creates a new abstract pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerators as input.
            </summary>
            <param name="IEnumerator1">An IEnumerator&lt;S1&gt; as element source.</param>
            <param name="IEnumerator2">An IEnumerator&lt;S2&gt; as element source.</param>
            <param name="IEnumerator3">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="IEnumerable1">An IEnumerable&lt;S1&gt; as element source.</param>
            <param name="IEnumerable2">An IEnumerable&lt;S2&gt; as element source.</param>
            <param name="IEnumerable3">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerator">An IEnumerator as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.Reset">
            <summary>
            Sets the enumerators to their initial positions, which
            is before the first element in the collections.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`4.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractPipe`5">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`5._InternalEnumerator1">
            <summary>
            The internal enumerator of the first collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`5._InternalEnumerator2">
            <summary>
            The internal enumerator of the second collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`5._InternalEnumerator3">
            <summary>
            The internal enumerator of the third collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`5._InternalEnumerator4">
            <summary>
            The internal enumerator of the third collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`5._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.#ctor">
            <summary>
            Creates a new abstract pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2},System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerators as input.
            </summary>
            <param name="IEnumerator1">An IEnumerator&lt;S1&gt; as element source.</param>
            <param name="IEnumerator2">An IEnumerator&lt;S2&gt; as element source.</param>
            <param name="IEnumerator3">An IEnumerator&lt;S3&gt; as element source.</param>
            <param name="IEnumerator4">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="IEnumerable1">An IEnumerable&lt;S1&gt; as element source.</param>
            <param name="IEnumerable2">An IEnumerable&lt;S2&gt; as element source.</param>
            <param name="IEnumerable3">An IEnumerable&lt;S3&gt; as element source.</param>
            <param name="IEnumerable4">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource4(`3)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerator">An IEnumerator as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSource4(System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S4&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.SetSourceCollection4(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S4&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.Reset">
            <summary>
            Sets the enumerators to their initial positions, which
            is before the first element in the collections.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`5.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractPipe`6">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S1">The type of the first consuming objects.</typeparam>
            <typeparam name="S2">The type of the second consuming objects.</typeparam>
            <typeparam name="S3">The type of the third consuming objects.</typeparam>
            <typeparam name="S4">The type of the fourth consuming objects.</typeparam>
            <typeparam name="S5">The type of the fifth consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`6._InternalEnumerator1">
            <summary>
            The internal enumerator of the first collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`6._InternalEnumerator2">
            <summary>
            The internal enumerator of the second collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`6._InternalEnumerator3">
            <summary>
            The internal enumerator of the third collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`6._InternalEnumerator4">
            <summary>
            The internal enumerator of the third collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`6._InternalEnumerator5">
            <summary>
            The internal enumerator of the third collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractPipe`6._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.#ctor">
            <summary>
            Creates a new abstract pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2},System.Collections.Generic.IEnumerator{`3},System.Collections.Generic.IEnumerator{`4})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerators as input.
            </summary>
            <param name="IEnumerator1">An IEnumerator&lt;S1&gt; as element source.</param>
            <param name="IEnumerator2">An IEnumerator&lt;S2&gt; as element source.</param>
            <param name="IEnumerator3">An IEnumerator&lt;S3&gt; as element source.</param>
            <param name="IEnumerator4">An IEnumerator&lt;S4&gt; as element source.</param>
            <param name="IEnumerator5">An IEnumerator&lt;S5&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Creates a new abstract pipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="IEnumerable1">An IEnumerable&lt;S1&gt; as element source.</param>
            <param name="IEnumerable2">An IEnumerable&lt;S2&gt; as element source.</param>
            <param name="IEnumerable3">An IEnumerable&lt;S3&gt; as element source.</param>
            <param name="IEnumerable4">An IEnumerable&lt;S4&gt; as element source.</param>
            <param name="IEnumerable5">An IEnumerable&lt;S5&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource1(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource2(`1)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource3(`2)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource4(`3)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource5(`4)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerator">An IEnumerator as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource1(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource2(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource3(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S3&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource4(System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S4&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSource5(System.Collections.Generic.IEnumerator{`4})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S5&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S5&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSourceCollection1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S1&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S1&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSourceCollection2(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S2&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S2&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSourceCollection3(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S3&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S3&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSourceCollection4(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S4&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S4&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.SetSourceCollection5(System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S5&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S5&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.Reset">
            <summary>
            Sets the enumerators to their initial positions, which
            is before the first element in the collections.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractPipe`6.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FileFilterPipe">
            <summary>
            The FileFilterPipe scans the given directories
            for files matching the given filters.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FileFilterPipe.#ctor(System.String,System.IO.SearchOption,de.ahzf.Vanaheimr.Styx.FileFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Scans the given directories for files matching the given filters.
            </summary>
            <param name="SearchPattern">A simple search pattern like "*.jpg".</param>
            <param name="SearchOption">Include or do not include subdirectories.</param>
            <param name="FileFilter">A delegate for filtering the found files.</param>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FileFilterPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FileFilterPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1">
            <summary>
            An AbstractArrowSender provides most of the functionality that is repeated
            in every instance of an Arrow. Any subclass of AbstractPipe should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TMessage">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrowSender`1">
            <summary>
            The common interface for any Arrow implementation sending messages of type TOut.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IArrowSender`1.SendTo(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            Sends messages/objects from this Arrow to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IArrowSender`1.SendTo(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            Sends messages/objects from this Arrow to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.IArrowSender`1.OnMessageAvailable">
            <summary>
            An event for message delivery.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.#ctor">
            <summary>
            Creates a new AbstractArrowSender.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            Creates a new AbstractArrow and adds the given recipients
            to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            Creates a new AbstractArrow and adds the given recipients
            to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.SendTo(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            Sends messages/objects from this Arrow to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.SendTo(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            Sends messages/objects from this Arrow to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.NotifyRecipients(System.Object,`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
            <returns>True if the message was accepted and could be processed; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.Complete(System.Object)">
            <summary>
            Signale the completion of the message delivery.
            </summary>
            <param name="Sender">The sender of the completion signal.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.ToString">
            <summary>
            A string representation of this object.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.OnMessageAvailable">
            <summary>
            An event for message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.OnError">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.RecordMessagePath">
            <summary>
            Turns the recording of the message delivery path ON or OFF.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractArrowSender`1.Path">
            <summary>
            Returns the message path.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor">
            <summary>
            A sensor measuring the actual time.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor`1">
            <summary>
            A sensor measuring the actual time.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor`1._Random">
            <summary>
            The source of randomness.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor measuring the actual time.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor`1.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor.#ctor(System.String)">
            <summary>
            A sensor measuring the actual time.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor measuring the actual time.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.TimestampSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor measuring the actual time.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor">
            <summary>
            A sensor returning the actual value of a counter.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor`1">
            <summary>
            A sensor returning the actual value of a counter.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor`1.#ctor(`0,System.String,System.Int64)">
            <summary>
            A sensor returning the actual value of a counter.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="StartValue">An optional start value for the counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor`1.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor.#ctor(System.String,System.Int64)">
            <summary>
            A sensor returning the actual value of a counter.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
            <param name="StartValue">An optional start value for the counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String,System.Int64)">
            <summary>
            A sensor returning the actual value of a counter.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="StartValue">An optional start value for the counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.CounterSensor.#ctor(System.UInt64,System.String,System.Int64)">
            <summary>
            A sensor returning the actual value of a counter.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="StartValue">An optional start value for the counter.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumeratorExtensions">
            <summary>
            Extension methods for the IEnumerator interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumeratorExtensions.ToSensor``2(System.Collections.Generic.IEnumerator{``1},``0,System.String,System.String)">
            <summary>
            Creates a new sensor fireing the content of the given IEnumerator.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerator">An enumerator of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <returns>A new ISensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumeratorExtensions.ToActiveSensor``2(System.Collections.Generic.IEnumerator{``1},``0,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor fireing the content of the given IEnumerator.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerator">An enumerator of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumeratorExtensions.ToActiveSensor``2(System.Collections.Generic.IEnumerator{``1},``0,System.String,System.String,de.ahzf.Vanaheimr.Styx.MessageRecipient{``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor fireing the content of the given IEnumerator.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerator">An enumerator of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumeratorExtensions.ToActiveSensor``2(System.Collections.Generic.IEnumerator{``1},``0,System.String,System.String,de.ahzf.Vanaheimr.Styx.IArrowReceiver{``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor fireing the content of the given IEnumerator.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerator">An enumerator of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PropertiesPipeExtentions">
            <summary>
            Extention methods for the PropertiesPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipeExtentions.Ps``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipeExtentions.Ps``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipeExtentions.Ps``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipeExtentions.Ps``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PropertiesPipe`2">
            <summary>
            Emits the property values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipe`2.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}},System.Collections.Generic.IEnumerator{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}},`0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <param name="IEnumerable">An optional IEnumerable&lt;IIdentifier&lt;TId&gt;&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;IIdentifier&lt;TId&gt;&gt; as element source.</param>
            <param name="Keys">The property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipe`2.#ctor(de.ahzf.Illias.Commons.KeyValueFilter{`0,`1},System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}},System.Collections.Generic.IEnumerator{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;...&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;...&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertiesPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISplitPipe">
            <summary>
            A SplitPipe consumes objects of type S and emits objects of type E1 and E2.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISplitPipe`3">
            <summary>
            A SplitPipe consumes objects of type S and emits objects of type E1 and E2.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E1">The type of the first emitting objects.</typeparam>
            <typeparam name="E2">The type of the second emitting objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FairMergePipe`1">
            <summary>
            FairMergePipe will, in a round robin fashion,
            emit the objects of its internal pipes.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FairMergePipe`1.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe})">
            <summary>
            Creates a new FairMergePipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FairMergePipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe[])">
            <summary>
            Creates a new FairMergePipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FairMergePipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FairMergePipe`1.Reset">
            <summary>
            A pipe may maintain state. Reset is used to remove state.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FairMergePipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.FairMergePipe`1.Pipes">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`3">
            <summary>
            This SideEffectArrow will produce a side effect which can
            be retrieved by the SideEffect property.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrow`2">
            <summary>
            The generic interface for any Arrow implementation.
            An Arrow accepts/consumes messages/objects of type S and emits messages/objects
            of type E via an event.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrowReceiver`1">
            <summary>
            The common interface for any Arrow implementation accepting messages of type TIn.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IArrowReceiver`1.ReceiveMessage(System.Object,`0)">
            <summary>
            Accepts a message of type TIn from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrow">
            <summary>
            The common interface for any Arrow implementation.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`3.SideEffect">
            <summary>
            The SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`4">
            <summary>
            This SideEffectArrow will produce two side effects which can
            be retrieved by the SideEffect properties.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`4.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`4.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`5">
            <summary>
            This SideEffectArrow will produce three side effects which can
            be retrieved by the SideEffect properties.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`5.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`5.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectArrow`5.SideEffect3">
            <summary>
            The third SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SameValueFilterArrowExtensions">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrowExtensions.SameValueFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0})">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrowExtensions.SameValueFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0)">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="LastMessage">Sets the initial value of LastMessage.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrowExtensions.SameValueFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrowExtensions.SameValueFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SkipArrow`1">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractArrow`2">
            <summary>
            An AbstractArrow provides most of the functionality that is repeated
            in every instance of an Arrow. Any subclass of AbstractPipe should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.#ctor">
            <summary>
            Creates a new AbstractArrow.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            Creates a new AbstractArrow and adds the given recipients
            to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            Creates a new AbstractArrow and adds the given recipients
            to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.SendTo(de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            Sends messages/objects from this Arrow to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.SendTo(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            Sends messages/objects from this Arrow to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.ReceiveMessage(System.Object,`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
            <returns>True if the message should be forwarded; False otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.Complete(System.Object)">
            <summary>
            Signale the completion of the message delivery.
            </summary>
            <param name="Sender">The sender of the completion signal.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.ToString">
            <summary>
            A string representation of this object.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.OnMessageAvailable">
            <summary>
            An event for message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.OnError">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.RecordMessagePath">
            <summary>
            Turns the recording of the message delivery path ON or OFF.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractArrow`2.Path">
            <summary>
            Returns the message path.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrow`1.#ctor(System.UInt32)">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrow`1.#ctor(System.UInt32,de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrow`1.#ctor(System.UInt32,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.UnrollPipe`1">
            <summary>
            The UnrollPipe will unroll any IEnumerator/IEnumerable of IEnumerable that is inputted into it.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.UnrollPipe`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}},System.Collections.Generic.IEnumerator{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            The UnrollPipe will unroll any IEnumerator/IEnumerable of IEnumerable that is inputted into it.
            </summary>
            <param name="IEnumerable"></param>
            <param name="IEnumerator"></param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.UnrollPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ActionPipe`1">
            <summary>
            The ActionPipe is much like the IdentityPipe, but calls
            an Action &lt;S&gt; on every consuming object before
            returing them.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionPipe`1.#ctor(System.Action{`0})">
            <summary>
            Creates a new ActionPipe using the given Action&lt;S&gt;.
            </summary>
            <param name="myAction">An Action&lt;S&gt; to be called on every consuming object.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.GroupCountPipe`1">
            <summary>
            The GroupCountPipe will simply emit the incoming object, but generate a map side effect.
            The map's keys are the objects that come into the pipe.
            The map's values are the number of times that the key object has come into the pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`3">
            <summary>
            This SideEffectPipe will produce a side effect which can be
            retrieved by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`3.SideEffect">
            <summary>
            The SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.GroupCountPipe`1.#ctor">
            <summary>
            Creates a new GroupCountPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.GroupCountPipe`1.#ctor(System.Collections.Generic.IDictionary{`0,System.UInt64})">
            <summary>
            Creates a new GroupCountPipe using the given IDictionary&lt;S, UInt64&gt;.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.GroupCountPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.GroupCountPipe`1.SideEffect">
            <summary>
            The sideeffect produced by this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ToUpperPipe">
            <summary>
            The ToUpperPipe converts all incoming strings to uppercase.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToUpperPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.OrFilterPipe`1">
            <summary>
            The OrFilterPipe takes a collection of pipes that emit boolean objects.
            Each pipe in the collection is fed the same incoming S object. If one
            of the internal pipes emits true, then the OrFilterPipe emits the S
            object. If not, then the incoming object is not emitted.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.OrFilterPipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe{`0,System.Boolean}[])">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">Multiple IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.OrFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe{`0,System.Boolean}})">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">A collection of IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.OrFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.DuplicateFilterPipeExtensions">
            <summary>
            The DuplicateFilterPipe will not allow a duplicate object to pass through it.
            This is accomplished by the Pipe maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Pipe, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterPipeExtensions.DuplicateFilter``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            The DuplicateFilter will filter duplicate entries from the enumeration.
            </summary>
            <param name="IEnumerable">An enumeration of objects of type S.</param>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.DuplicateFilterPipe`1">
            <summary>
            The DuplicateFilterPipe will not allow a duplicate object to pass through it.
            This is accomplished by the Pipe maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Pipe, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.DuplicateFilterPipe`1._HistorySet">
            <summary>
            The internal hashset used as a history of values.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new DuplicateFilterPipe.
            </summary>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.UniquePathFilterPipe`1">
            <summary>
            UniquePathFilterPipe will only let an object pass if the path up to
            this point has no repeated elements. Thus, its a way to filter out
            paths that are looping.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.UniquePathFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SplitPipeExtensions.SplitPipe``1(System.Collections.Generic.IEnumerable{``0},System.Byte)">
            <summary>
            The SplitPipe either allows or disallows all
            Edges that have the provided label.
            </summary>
            <param name="IEnumerable">A collection of objects implementing IPropertyEdge.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SplitPipeExtensions.SplitPipe``1(System.Collections.Generic.IEnumerator{``0},System.Byte)">
            <summary>
            The LabelFilterPipe either allows or disallows all
            Edges that have the provided label.
            </summary>
            <param name="IEnumerator">A enumerator of objects implementing IPropertyEdge.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AggregatorArrow`1">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`3">
            <summary>
            The AbstractSideEffectArrow provides the same functionality as the 
            AbstractArrow, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <typeparam name="TSideeffect">The type of the sideeffect.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`3._SideEffect">
            <summary>
            The SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`3.#ctor">
            <summary>
            Creates a new AbstractSideEffectArrow.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`3.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            Creates a new AbstractSideEffectArrow and adds the given
            recipients to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`3.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            Creates a new AbstractSideEffectArrow and adds the given
            recipients to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`3.SideEffect">
            <summary>
            The SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrow`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ICollection">An optional ICollection to store the passed messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrow`1.#ctor(System.Collections.Generic.ICollection{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ICollection">An ICollection to store the passed messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrow`1.#ctor(System.Collections.Generic.ICollection{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ICollection">An ICollection to store the passed messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrow`1.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.INewArrow">
            <summary>
            The common interface for any Arrow implementation.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.INewArrow`2">
            <summary>
            The generic interface for any Arrow implementation.
            An Arrow accepts/consumes messages/objects of type S and emits messages/objects
            of type E via an event.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IFilterArrow`1">
            <summary>
            A FilterArrow is much like the IdentityArrow, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
            <typeparam name="TMessage">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IFilterArrow">
            <summary>
            A FilterArrow is much like the IdentityArrow, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1.#ctor(`0,`0)">
            <summary>
            Sends a message when then received values are not within
            the bounding box of then given Min/Max-values.
            </summary>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1.#ctor(`0,`0,de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1.#ctor(`0,`0,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1.Lower">
            <summary>
            The lower bound of the passed values.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.BandFilterArrow`1.Upper">
            <summary>
            The upper bound of the passed values.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsSensor">
            <summary>
            A sensor collecting the received and sent packets and bytes
            of a network interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsSensor.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsSensor.#ctor(System.String,System.String,System.String)">
            <summary>
            A sensor collecting the received and sent packets and bytes
            of a network interface.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="mySensorName">The well-known name of this sensor.</param>
            <param name="myInstance">The network instance to gather the data from.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ScatterPipe`2">
            <summary>
            The ScatterPipe will unroll any IEnumerator/IEnumerable that is inputted into it.
            This will only occur for one level deep. It will not unroll an IEnumerator emitted by an IEnumerator, etc.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ScatterPipe`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            The ScatterPipe will unroll any IEnumerator/IEnumerable that is inputted into it.
            </summary>
            <param name="IEnumerable"></param>
            <param name="IEnumerator"></param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ScatterPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.StdDevPipe">
            <summary>
            The StdDevPipe produces a side effect that is the
            sliding standard deviation and the average of the input.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevPipe.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerator{System.Double})">
            <summary>
            Creates a new StdDevPipe calculating a side effect that is the
            sliding standard deviation and the average of the input.
            </summary>
            <param name="IEnumerable">An optional IEnumerable&lt;Double&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;Double&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevPipe.ToString">
            <summary>
            Returns a string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions">
            <summary>
            Extention methods for CSV pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions.CSVPipe(System.Collections.Generic.IEnumerable{System.String},System.Text.RegularExpressions.Regex,System.String[],System.StringSplitOptions,System.Nullable{System.UInt16},System.Boolean,System.Boolean)">
            <summary>
            Splits a given strings into elements by a given sperator.
            </summary>
            <param name="IEnumerable">An enumeration of strings.</param>
            <param name="IgnoreLines">A regular expression indicating which input strings should be ignored. Default: All lines starting with a '#'.</param>
            <param name="Seperators">An array of string used to split the input strings.</param>
            <param name="StringSplitOptions">Split options, e.g. remove empty entries.</param>
            <param name="ExpectedNumberOfColumns">If the CSV file had a schema, a specific number of columns can be expected. If instead it is a list of values no such value can be expected.</param>
            <param name="FailOnWrongNumberOfColumns">What to do when the current and expected number of columns do not match.</param>
            <param name="TrimColumns">Remove leading and trailing whitespaces.</param>
            <returns>An enumeration of string arrays.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions.CSVPipe(System.Collections.Generic.IEnumerator{System.String},System.Text.RegularExpressions.Regex,System.String[],System.StringSplitOptions,System.Nullable{System.UInt16},System.Boolean,System.Boolean)">
            <summary>
            Splits a given strings into elements by a given sperator.
            </summary>
            <param name="IEnumerator">An enumerator of strings.</param>
            <param name="IgnoreLines">A regular expression indicating which input strings should be ignored. Default: All lines starting with a '#'.</param>
            <param name="Seperators">An array of string used to split the input strings.</param>
            <param name="StringSplitOptions">Split options, e.g. remove empty entries.</param>
            <param name="ExpectedNumberOfColumns">If the CSV file had a schema, a specific number of columns can be expected. If instead it is a list of values no such value can be expected.</param>
            <param name="FailOnWrongNumberOfColumns">What to do when the current and expected number of columns do not match.</param>
            <param name="TrimColumns">Remove leading and trailing whitespaces.</param>
            <returns>An enumeration of string arrays.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions.FixLineBreaks(System.Collections.Generic.IEnumerable{System.String},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="StartOfNewLineRegExpr">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions.FixLineBreaks(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="StartOfNewLineRegExprString">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions.FixLineBreaks(System.Collections.Generic.IEnumerator{System.String},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="IEnumerator">An enumerator of lines.</param>
            <param name="StartOfNewLineRegExpr">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVPipeExtensions.FixLineBreaks(System.Collections.Generic.IEnumerator{System.String},System.String,System.String)">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="IEnumerator">An enumerator of lines.</param>
            <param name="StartOfNewLineRegExprString">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.MessageRecipient`1">
            <summary>
            A delegate for delivering messages.
            </summary>
            <typeparam name="TMessage">The type of the message/object.</typeparam>
            <param name="Sender">The sender of the message.</param>
            <param name="Message">The message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CompletionRecipient">
            <summary>
            A delegate for signaling the completion of a message delivery.
            </summary>
            <param name="Sender">The sender of the completion signal.</param>
            <returns>True if the completion message was accepted; False otherwise.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ExceptionRecipient">
            <summary>
            A delegate for signaling an exception.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="Exception">An exception.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrowSender">
            <summary>
            The common IArrowSender interface
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.IArrowSender.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.IArrowSender.OnError">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrowReceiver">
            <summary>
            The common IArrowReceiver interface
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IArrowReceiver.ReceiveMessage(System.Object,System.Object)">
            <summary>
            Accepts a message of type TIn from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IdentityArrow`1">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrow`1.#ctor">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrow`1.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrow`1.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The IdentityArrow is the most basic arrow.
            It simply sends the incoming message to the recipients without any processing.
            This arrow is useful in various test case situations.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.NewFuncArrow`2">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NewFuncArrow`2.#ctor(System.Func{`0,`1})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Func">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NewFuncArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.NewFuncArrow`3">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NewFuncArrow`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Func">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NewFuncArrow`3.ProcessNotification(`0,`1)">
            <summary>
            Process the incoming message and send an outgoing message.
            </summary>
            <param name="MessageIn1">The first incoming message.</param>
            <param name="MessageIn2">The second incoming message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1.#ctor">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1.#ctor(`0)">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="LastMessage">Sets the initial value of LastMessage.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The SameValueFilterArrow will not allow to send two
            consecutive identical messages twice.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.SameValueFilterArrow`1.LastMessage">
            <summary>
            The last message send.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter._Id">
            <summary>
            The identification string of the network interface counter.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter._CounterName">
            <summary>
            The name of the network interface counter.
            </summary>        
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.#ctor(System.String)">
            <summary>
            Creates a new network interface counter type based on the given counter name.
            </summary>
            <param name="myCounterName">The name of the network interface counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.op_Equality(de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter,de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="myNetworkInterfaceCounter1">A NetworkInterfaceCounter.</param>
            <param name="myNetworkInterfaceCounter2">Another NetworkInterfaceCounter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.op_Inequality(de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter,de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="myNetworkInterfaceCounter1">A NetworkInterfaceCounter.</param>
            <param name="myNetworkInterfaceCounter2">Another NetworkInterfaceCounter.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.CompareTo(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="myObject">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.CompareTo(de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="myNetworkInterfaceCounter">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="myObject">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.Equals(de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="myNetworkInterfaceCounter">An object to compare with.</param>
            <returns>true|false</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PathPipe`1">
            <summary>
            Emits the path that the traverser has taken up to this object.
            In other words, it uses the Path property of the previous pipe
            to emit the transformation stages.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PathPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AggregatorPipe`1">
            <summary>
            The AggregatorPipe produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            Before the first object is emitted from the AggregatorPipe, all of its
            incoming objects have been aggregated into the collection.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorPipe may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`3">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`3._SideEffect">
            <summary>
            The SideEffect produced by this Pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor">
            <summary>
            Creates a new AbstractSideEffectPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`3.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new AbstractSideEffectPipe using the elements
            emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`3.SideEffect">
            <summary>
            The SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorPipe`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new AggregatorPipe.
            </summary>
            <param name="ICollection">An optional ICollection to store the passed objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1">
            <summary>
            ExpandableEnumerator takes an IEnumerator and will emit its elements.
            However, if an object is added to ExpandableEnumerator, then its put into
            an internal queue. The queue has priority over the internal enumerator when
            accessing the current element.
            </summary>
            <typeparam name="T">The type of the stored elements.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new ExpandableEnumerator based on the given myIEnumerator.
            </summary>
            <param name="myIEnumerator">The enumerator to be wrapped.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection and clears
            the internal queue.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.Add(`0)">
            <summary>
            Adds an element to the internal queue.
            </summary>
            <param name="myElement">The element to add.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.Dispose">
            <summary>
            Dispose this object.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ExpandableEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1">
            <summary>
            SingleEnumerator is an iterator that only contains one element
            of type T. This has applications in various metapipes, where
            single objects are manipulated at a time.
            </summary>
            <typeparam name="T">The type of the stored element.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISingleEnumerator">
            <summary>
            A helper interface for the SingleEnumerator&lt;T&gt; class.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISingleEnumerator.Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.#ctor(`0)">
            <summary>
            Creates a new single element enumerator based on the given element.
            </summary>
            <param name="myElement">The element within the enumerator.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.Dispose">
            <summary>
            Dispose this enumerator.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.Current">
            <summary>
            Return the current element of the current IEnumertor&lt;T&gt;.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.de#ahzf#Vanaheimr#Styx#ISingleEnumerator#Current">
            <summary>
            Return the current element of the internal ISingleEnumerator.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState">
            <summary>
            The internal state of the SingleEnumerator&lt;T&gt;.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState.BEFORE">
            <summary>
            Before the element.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState.AT">
            <summary>
            At the element.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.SingleEnumerator`1.SingleEnumeratorState.BEHIND">
            <summary>
            Behind the element.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PropertyPipeExtentions">
            <summary>
            Extention methods for the PropertyPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipeExtentions.P``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipeExtentions.P``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},``0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="Keys">An array of property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipeExtentions.P``2(de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="Properties">An object implementing IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipeExtentions.P``2(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{``0,``1}},de.ahzf.Illias.Commons.KeyValueFilter{``0,``1})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="IEnumerable">An enumeration of IReadOnlyProperties&lt;TKey, TValue&gt;.</param>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.PropertyPipe`2">
            <summary>
            Emits the property values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipe`2.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}},System.Collections.Generic.IEnumerator{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}},`0[])">
            <summary>
            Emits the property values of the given property keys (OR-logic).
            </summary>
            <param name="IEnumerable">An optional IEnumerable&lt;IIdentifier&lt;TId&gt;&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;IIdentifier&lt;TId&gt;&gt; as element source.</param>
            <param name="Keys">The property keys.</param>
            <returns>The property values of the given property keys.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipe`2.#ctor(de.ahzf.Illias.Commons.KeyValueFilter{`0,`1},System.Collections.Generic.IEnumerable{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}},System.Collections.Generic.IEnumerator{de.ahzf.Illias.Commons.Collections.IReadOnlyProperties{`0,`1}})">
            <summary>
            Emits the property values filtered by the given keyvalue filter.
            </summary>
            <param name="KeyValueFilter">An optional delegate for keyvalue filtering.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;...&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;...&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.PropertyPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1">
            <summary>
            CopySplitPipe takes a number of pipes during construction.
            Every object pulled through CopySplitPipe is copied to each of the internal pipes.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe})">
            <summary>
            Creates a new CopySplitPipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe[])">
            <summary>
            Creates a new CopySplitPipe based on the given Pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.Reset">
            <summary>
            A pipe may maintain state. Reset is used to remove state.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.Pipes">
            <summary>
            A MetaPipe is a pipe that "wraps" some collection of pipes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CopySplitPipe`1.CopyExpandablePipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IEnumerableExtensions">
            <summary>
            A class of specialized IEnumerable extension methods.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IEnumerableExtensions.MapEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Iterates over the given enumeration, calls the given func
            for each item and returns it immediately.
            </summary>
            <typeparam name="S">The type of the enumerated objects.</typeparam>
            <typeparam name="E">The type of the returning objects.</typeparam>
            <param name="IEnumerable">A enumeration of objects of type T.</param>
            <param name="Func">A mapping method to call for every item of the enumeration.</param>
            <returns>An enumeration of mapped objects of type E</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IEnumerableExtensions.ToSniper``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new Sniper fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TMessage">The type of the emitted messages/objects.</typeparam>
            <param name="IEnumerable">An enumeration of messages/objects to send.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
            <returns>A new Sniper.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IOPipeExtensions.FileFilterPipe(System.Collections.Generic.IEnumerable{System.String},System.String,System.IO.SearchOption,de.ahzf.Vanaheimr.Styx.FileFilter)">
            <summary>
            Scans the given directories for files matching the given filters.
            </summary>
            <param name="IEnumerable">An enumeration of directories.</param>
            <param name="SearchPattern">A simple search pattern like "*.jpg".</param>
            <param name="SearchOption">Include or do not include subdirectories.</param>
            <param name="FileFilter">A delegate for filtering the found files.</param>
            <returns>An enumeration of file infos.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IOPipeExtensions.FileFilterPipe(System.Collections.Generic.IEnumerator{System.String},System.String,System.IO.SearchOption,de.ahzf.Vanaheimr.Styx.FileFilter)">
            <summary>
            Scans the given directories for files matching the given filters.
            </summary>
            <param name="IEnumerator">An enumerator of directories.</param>
            <param name="SearchPattern">A simple search pattern like "*.jpg".</param>
            <param name="SearchOption">Include or do not include subdirectories.</param>
            <param name="FileFilter">A delegate for filtering the found files.</param>
            <returns>An enumeration of file infos.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.BandFilterArrowExtensions">
            <summary>
            Sends a message when then received values are not within
            the bounding box of then given Min/Max-values.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrowExtensions.BandFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0,``0)">
            <summary>
            Sends a message when then received values are not within
            the bounding box of then given Min/Max-values.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrowExtensions.BandFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0,``0,de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            Sends a message when then received values are not within
            the bounding box of then given Min/Max-values.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BandFilterArrowExtensions.BandFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0,``0,de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            Sends a message when then received values are not within
            the bounding box of then given Min/Max-values.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Lower">The lower bound of the passed values.</param>
            <param name="Upper">The upper bound of the passed values.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1">
            <summary>
            An AbstractArrow provides most of the functionality that is repeated
            in every instance of an Arrow. Any subclass of AbstractPipe should simply
            implement ProcessMessage(MessageIn, out MessageOut).
            An Arrow accepts/consumes messages/objects of type TIn and emits
            messages/objects of type TOut via an event.
            </summary>
            <typeparam name="TMessage">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.#ctor">
            <summary>
            Creates a new AbstractArrowReceiver.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.ReceiveMessage(System.Object,`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.Complete(System.Object)">
            <summary>
            Signale the completion of the message delivery.
            </summary>
            <param name="Sender">The sender of the completion signal.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.ToString">
            <summary>
            A string representation of this object.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.OnError">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.RecordMessagePath">
            <summary>
            Turns the recording of the message delivery path ON or OFF.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractArrowReceiver`1.Path">
            <summary>
            Returns the message path.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4">
            <summary>
            The AbstractSideEffectArrow provides the same functionality as the 
            AbstractArrow, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4._SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4._SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4.#ctor">
            <summary>
            Creates a new AbstractSideEffectArrow.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            Creates a new AbstractSideEffectArrow and adds the given
            recipients to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            Creates a new AbstractSideEffectArrow and adds the given
            recipients to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`4.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.#ctor">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Double},de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Double}[])">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Double},de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Double}[])">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.ProcessMessage(System.Double,System.Double@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.StdDev">
            <summary>
            The standard deviation of the processed messages.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.Variance">
            <summary>
            The variance of the processed messages.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrow.Average">
            <summary>
            The average of the processed messages.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5">
            <summary>
            The AbstractSideEffectArrow provides the same functionality as the 
            AbstractArrow, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
            <typeparam name="T3">The type of the third sideeffect.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5._SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5._SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5._SideEffect3">
            <summary>
            The third SideEffect produced by this Arrow.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5.#ctor">
            <summary>
            Creates a new AbstractSideEffectArrow.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            Creates a new AbstractSideEffectArrow and adds the given
            recipients to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            Creates a new AbstractSideEffectArrow and adds the given
            recipients to the list of message recipients.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5.SideEffect1">
            <summary>
            The first SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5.SideEffect2">
            <summary>
            The second SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectArrow`5.SideEffect3">
            <summary>
            The third SideEffect produced by this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.RandomFilterPipeExtensions">
            <summary>
            The RandomFilterPipe filters out objects that pass through it using a biased coin.
            For each passing object, a random number generator creates a double value between 0 and 1.
            If the randomly generated double is less than or equal the provided bias, then the object is allowed to pass.
            If the randomly generated double is greater than the provided bias, then the object is not allowed to pass.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RandomFilterPipeExtensions.RandomFilter``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Random)">
            <summary>
            The RandomFilterPipe filters out objects that pass through it using a biased coin.
            For each passing object, a random number generator creates a double value between 0 and 1.
            If the randomly generated double is less than or equal the provided bias, then the object is allowed to pass.
            If the randomly generated double is greater than the provided bias, then the object is not allowed to pass.        /// </summary>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
            <param name="IEnumerable">An enumeration of objects of type S.</param>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.RandomFilterPipe`1">
            <summary>
            The RandomFilterPipe filters out objects that pass through it using a biased coin.
            For each passing object, a random number generator creates a double value between 0 and 1.
            If the randomly generated double is less than or equal the provided bias, then the object is allowed to pass.
            If the randomly generated double is greater than the provided bias, then the object is not allowed to pass.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RandomFilterPipe`1.#ctor(System.Double,System.Random,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new RandomFilterPipe.
            </summary>
            <param name="Bias">The bias.</param>
            <param name="Random">An optional source of randomness.</param>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RandomFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RandomFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ReadTextStreamPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ReadTextStreamPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISniper`1">
            <summary>
            The common interface for any Arrow implementations sending messages of type E.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ISniper`1.AsTask(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Create as task for the message/object fireing.
            </summary>
            <param name="TaskCreationOption">Specifies flags that control optional behavior for the creation and execution of tasks.</param>
            <returns>The created task.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ISniper`1.StartToFire(System.Boolean)">
            <summary>
            Starts the sniper fire!
            </summary>
            <param name="Async">Whether to run within a seperate task or not.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.InitialDelay">
            <summary>
            The initial delay before starting to fire asynchronously.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.IsTask">
            <summary>
            Whether the sniper is running asynchronously or not.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.FireCancellationTokenSource">
            <summary>
            Signals to a FireCancellationToken that it should be canceled.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.FireCancellationToken">
            <summary>
            Propogates notification that the asynchronous fireing should be canceled.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.FireTask">
            <summary>
            The internal task for fireing the messages/objects.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.Intervall">
            <summary>
            The intervall will throttle the automatic measurement of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISniper`1.LastFireTime">
            <summary>
            The last time the sniper fired.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrowExtensions">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrowExtensions.StdDevSideEffectArrow(de.ahzf.Vanaheimr.Styx.IArrowSender{System.Double})">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrowExtensions.StdDevSideEffectArrow(de.ahzf.Vanaheimr.Styx.IArrowSender{System.Double},de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Double},de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Double}[])">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevSideEffectArrowExtensions.StdDevSideEffectArrow(de.ahzf.Vanaheimr.Styx.IArrowSender{System.Double},de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Double},de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Double}[])">
            <summary>
            The StdDevSideEffectArrow produces a side effect that
            is the sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrowExtensions">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrowExtensions.DuplicateFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0})">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrowExtensions.DuplicateFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrowExtensions.DuplicateFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn1">The type of the first consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The type of the second consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.BlockingCollection1">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.BlockingCollection2">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.MessageProcessor">
            <summary>
            A delegate for transforming two incoming messages into a single outgoing message.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.ArrowSenderTask">
            <summary>
            The internal arrow sender task.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.#ctor(System.Func{`0,`1,`2},de.ahzf.Vanaheimr.Styx.IArrowSender{`0},de.ahzf.Vanaheimr.Styx.IArrowSender{`1})">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="MessageProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="ArrowSender1">An optional first arrow sender.</param>
            <param name="ArrowSender2">An optional second arrow sender.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.#ctor(System.Func{`0,`1,`2},de.ahzf.Vanaheimr.Styx.IArrowSender{`0},de.ahzf.Vanaheimr.Styx.IArrowSender{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`2}[])">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="MessageProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="ArrowSender1">An optional first arrow sender.</param>
            <param name="ArrowSender2">An optional second arrow sender.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.#ctor(System.Func{`0,`1,`2},de.ahzf.Vanaheimr.Styx.IArrowSender{`0},de.ahzf.Vanaheimr.Styx.IArrowSender{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`2}[])">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="MessageProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="ArrowSender1">An optional first arrow sender.</param>
            <param name="ArrowSender2">An optional second arrow sender.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.ReceiveMessage1(System.Object,`0)">
            <summary>
            Accepts a message of type TIn1 from a sender for further
            processing and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn1">The message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.ReceiveMessage2(System.Object,`1)">
            <summary>
            Accepts a message of type TIn2 from a sender for further
            processing and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn2">The message.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ConcurrentCombineArrow`3.MaxQueueSize">
            <summary>
            The maximum number of queued messages for both arrow senders.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncArrow`2">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.FuncArrow`2.MessageProcessor">
            <summary>
            A delegate for transforming incoming messages into outgoing messages.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrow`2.#ctor(System.Func{`0,`1})">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrow`2.#ctor(System.Func{`0,`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrow`2.#ctor(System.Func{`0,`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrow`2.ProcessMessage(`0,`1@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessWorkingSetSensor">
            <summary>
            A sensor measuring the size of the current process working set in bytes.
            The Working Set is the set of memory pages touched recently by the threads in the
            process. If free memory in the computer is above a threshold, pages are left in the
            Working Set of a process even if they are not in use.  When free memory falls below
            a threshold, pages are trimmed from Working Sets. If they are needed they will then
            be soft-faulted back into the Working Set before leaving main memory.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessWorkingSetSensor`1">
            <summary>
            A sensor measuring the size of the current process working set in bytes.
            The Working Set is the set of memory pages touched recently by the threads in the
            process. If free memory in the computer is above a threshold, pages are left in the
            Working Set of a process even if they are not in use.  When free memory falls below
            a threshold, pages are trimmed from Working Sets. If they are needed they will then
            be soft-faulted back into the Working Set before leaving main memory.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2">
            <summary>
            An abstract sensor node for accessing performance counters.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2._PerformanceCounter">
            <summary>
            The internal performance counter.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2._ValueConverter">
            <summary>
            A delegate converting performance counter
            values into another datastructure.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2.#ctor(`0,System.String,System.String,System.String,System.String,System.Func{System.Single,`1})">
            <summary>
            Creates a new AbstractPerformanceCounterSensor_UInt64.
            </summary>
            <param name="SensorId">The identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="CategoryName">The performance counter category.</param>
            <param name="CounterName">The name of the performance counter.</param>
            <param name="ValueConverter">A delegate converting performance counter values into another datastructure.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2.#ctor(`0,System.String,System.String,System.String,System.String,System.String,System.Func{System.Single,`1})">
            <summary>
            Creates a new AbstractPerformanceCounterSensor_UInt64.
            </summary>
            <param name="SensorId">The identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="CategoryName">The performance counter category.</param>
            <param name="CounterName">The name of the performance counter.</param>
            <param name="InstanceName">The name of the performance counter instance.</param>
            <param name="ValueConverter">A delegate converting performance counter values into another datastructure.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.AbstractPerformanceCounterSensor`2.Dispose">
            <summary>
            Dispose this object.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessWorkingSetSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor measuring the size of the current process working set in bytes.
            The Working Set is the set of memory pages touched recently by the threads in the
            process. If free memory in the computer is above a threshold, pages are left in the
            Working Set of a process even if they are not in use.  When free memory falls below
            a threshold, pages are trimmed from Working Sets. If they are needed they will then
            be soft-faulted back into the Working Set before leaving main memory.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessWorkingSetSensor.#ctor(System.String)">
            <summary>
            A sensor measuring the size of the current process working set in bytes.
            The Working Set is the set of memory pages touched recently by the threads in the
            process. If free memory in the computer is above a threshold, pages are left in the
            Working Set of a process even if they are not in use.  When free memory falls below
            a threshold, pages are trimmed from Working Sets. If they are needed they will then
            be soft-faulted back into the Working Set before leaving main memory.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessWorkingSetSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor measuring the size of the current process working set in bytes.
            The Working Set is the set of memory pages touched recently by the threads in the
            process. If free memory in the computer is above a threshold, pages are left in the
            Working Set of a process even if they are not in use.  When free memory falls below
            a threshold, pages are trimmed from Working Sets. If they are needed they will then
            be soft-faulted back into the Working Set before leaving main memory.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessWorkingSetSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor measuring the size of the current process working set in bytes.
            The Working Set is the set of memory pages touched recently by the threads in the
            process. If free memory in the computer is above a threshold, pages are left in the
            Working Set of a process even if they are not in use.  When free memory falls below
            a threshold, pages are trimmed from Working Sets. If they are needed they will then
            be soft-faulted back into the Working Set before leaving main memory.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.BackPipeExtensions">
            <summary>
            Extension methods for the BackPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BackPipeExtensions.Back``2(de.ahzf.Vanaheimr.Styx.IPipe{``1,``0},System.UInt64)">
            <summary>
            Returns the incomming vertices of the given PropertyEdges.
            </summary>
            <param name="IEnumerable">An enumeration of PropertyEdges.</param>
            <param name="VertexFilter">An optional delegate for vertex filtering.</param>
            <returns>The incomming vertices of the given PropertyEdges.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.BackPipe`2">
            <summary>
            BackPipe will fully process the object through its internal pipe.
            If the internal pipe yields results, then the original object is emitted
            from the BackPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BackPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncPipe`2">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S, E&gt;.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new FuncPipe using the given Func&lt;S, E&gt;.
            </summary>
            <param name="myFunc">A Func&lt;S, E&gt; converting the consuming objects into emitting objects.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncPipe`3">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S1, S2, E&gt;.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`3.#ctor(System.Func{`0,`1,`2},System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Creates a new FuncPipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="Func">A Func&lt;S1, S2, E&gt; converting the consuming objects into emitting objects.</param>
            <param name="IEnumerator1">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator2">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`3.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncPipe`4">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S1, S2, S3, E&gt;.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="S3">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`4.#ctor(System.Func{`0,`1,`2,`3},System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Creates a new FuncPipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="Func">A Func&lt;S1, S2, S3, E&gt; converting the consuming objects into emitting objects.</param>
            <param name="IEnumerator1">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator2">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator3">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`4.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncPipe`5">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S1, S2, S3, S4, E&gt;.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="S3">The type of the consuming objects.</typeparam>
            <typeparam name="S4">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`5.#ctor(System.Func{`0,`1,`2,`3,`4},System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2},System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Creates a new FuncPipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="Func">A Func&lt;S1, S2, S3, S4, E&gt; converting the consuming objects into emitting objects.</param>
            <param name="IEnumerator1">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator2">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator3">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator4">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`5.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncPipe`6">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S1, S2, S3, S4, E&gt;.
            </summary>
            <typeparam name="S1">The type of the consuming objects.</typeparam>
            <typeparam name="S2">The type of the consuming objects.</typeparam>
            <typeparam name="S3">The type of the consuming objects.</typeparam>
            <typeparam name="S4">The type of the consuming objects.</typeparam>
            <typeparam name="S5">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`6.#ctor(System.Func{`0,`1,`2,`3,`5},System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2},System.Collections.Generic.IEnumerator{`3})">
            <summary>
            Creates a new FuncPipe using the elements emitted
            by the given IEnumerables as input.
            </summary>
            <param name="Func">A Func&lt;S1, S2, S3, S4, E&gt; converting the consuming objects into emitting objects.</param>
            <param name="IEnumerator1">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator2">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator3">An optional enumerator of directories as element source.</param>
            <param name="IEnumerator4">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncPipe`6.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AndFilterPipe`1">
            <summary>
            The AndFilterPipe takes a collection of pipes, where E is boolean.
            Each provided pipe is fed the same incoming S object. If all the
            pipes emit true, then the AndFilterPipe emits the incoming S object.
            If not, then the incoming S object is not emitted.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AndFilterPipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe{`0,System.Boolean}[])">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">Multiple IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AndFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe{`0,System.Boolean}})">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">A collection of IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AndFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IHistoryEnumerator">
            <summary>
            A helper interface for the HistoryEnumerator&lt;T&gt; class.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.IHistoryEnumerator.Last">
            <summary>
            Return the last element of the internal IEnumertor.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor">
            <summary>
            An active sensor returning random numbers.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor`1">
            <summary>
            An active sensor returning random numbers.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2">
            <summary>
            The abstract active sensor.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the returned sensor data.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.IActiveSensor`2">
            <summary>
            The generic IActiveSensor interface with the type of the measureds values.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured values.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.IActiveSensor`1">
            <summary>
            The common generic IActiveSensor interface.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.IActiveSensor">
            <summary>
            The common IActiveSensor interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IActiveSensor.StartMeasurements">
            <summary>
            Start sensor measurements.
            </summary>
            <returns>True if succeeded; false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IActiveSensor.StopMeasurements">
            <summary>
            Stop sensor measurements.
            </summary>
            <returns>True if succeeded; false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.SensorIsStarting">
            <summary>
            Notify all OnSensorStarting event listeners.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.SensorStarted">
            <summary>
            Notify all OnSensorStarted event listeners.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.SensorIsStopping">
            <summary>
            Notify all SensorIsStopping event listeners.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.SensorStopped">
            <summary>
            Notify all OnSensorStopped event listeners.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.NewDataAvailable">
            <summary>
            Notify all OnNewDataAvailable event listeners.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.#ctor(`0,System.String,System.String)">
            <summary>
            Creates a new sensor having the given SensorId, SensorName and ValueUnit.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.MeasurementTask">
            <summary>
            The measurement task.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.StartMeasurements">
            <summary>
            Start sensor measurements.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.StopMeasurements">
            <summary>
            Stop sensor measurements.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.OnSensorStarting">
            <summary>
            An event that listeners can use to be notified whenever
            the sensor starts the OnNewDataAvailable service.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.OnSensorStarted">
            <summary>
            An event that listeners can use to be notified whenever the
            sensor finished to start the OnNewDataAvailable service.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.OnSensorStopping">
            <summary>
            An event that listeners can use to be notified whenever
            the sensor stops the OnNewDataAvailable service.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.OnSensorStopped">
            <summary>
            An event that listeners can use to be notified whenever the
            sensor finished to stop the OnNewDataAvailable service.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sensors.Active.AbstractActiveSensor`2.OnMessageAvailable">
            <summary>
            An event that listeners can use to be notified whenever
            new sensor data is available.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor`1._Random">
            <summary>
            The source of randomness.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor returning random numbers.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor`1.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor.#ctor(System.String)">
            <summary>
            An active sensor returning random numbers.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            An active sensor returning random numbers.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveRandomSensor.#ctor(System.UInt64,System.String)">
            <summary>
            An active sensor returning random numbers.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IComparisonFilterPipe`2">
            <summary>
            A ComparisonFilterPipe will allow or disallow objects that pass
            through it depending on some implemented comparison criteria.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IComparisonFilterPipe`2.CompareObjects(`1,`1)">
            <summary>
            Compares two objects.
            </summary>
            <param name="myLeftObject">The left object.</param>
            <param name="myRightObject">The right object.</param>
            <returns>A match based on the defined filter.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.RangeFilterPipeExtensions">
            <summary>
            The RangeFilterPipe will only allow a sequential subset of its incoming
            objects to be emitted to its output. This pipe can be provided -1 for
            both its high and low range to denote a wildcard for high and/or low.
            Note that -1 for both high and low is equivalent to the IdentityPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RangeFilterPipeExtensions.RangeFilter``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            The RangeFilter will only allow a sequential subset of its incoming
            objects to be emitted to its output. This pipe can be provided -1 for
            both its high and low range to denote a wildcard for high and/or low.
            Note that -1 for both high and low is equivalent to the IdentityPipe.
            </summary>
            <param name="Low">The minimal value.</param>
            <param name="High">The maximum value.</param>
            <param name="IEnumerable">An enumeration of objects of type S.</param>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.RangeFilterPipe`1">
            <summary>
            The RangeFilterPipe will only allow a sequential subset of its incoming
            objects to be emitted to its output. This pipe can be provided -1 for
            both its high and low range to denote a wildcard for high and/or low.
            Note that -1 for both high and low is equivalent to the IdentityPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RangeFilterPipe`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new RangeFilterPipe.
            </summary>
            <param name="Low">The minimal value.</param>
            <param name="High">The maximum value.</param>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RangeFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.RangeFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractComparisonFilterPipe`2">
            <summary>
            The AbstractComparisonFilterPipe provides the necessary functionality
            that is required of most ComparisonFilterPipe implementations.
            The compareObjects() implementation is useful for comparing two objects
            to determine if the current object in the pipe should be filtered.
            Depending on the type of ComparisonFilterPipe.Filter used, different
            types of comparisons are evaluated.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.ComparisonFilter">
            <summary>
            The filter used for comparing two objects.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.#ctor(de.ahzf.Vanaheimr.Styx.ComparisonFilter)">
            <summary>
            Creates a new AbstractComparisonFilterPipe using the given filter.
            </summary>
            <param name="ComparisonFilter">The filter used for comparing two objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.CompareObjects(`1,`1)">
            <summary>
            Compares two objects.
            </summary>
            <param name="LeftObject">The left object.</param>
            <param name="RightObject">The right object.</param>
            <returns>A match based on the defined filter.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractComparisonFilterPipe`2.ToString">
            <summary>
            A string representation of this filter pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sniper`1">
            <summary>
            The Sniper fetches messages/objects from a pipe, an IEnumerable or
            via an IEnumerator and sends them to the recipients.
            </summary>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sniper`1.IEnumerator">
            <summary>
            The internal source of messages/objects.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerable
            and sends them to the recipients.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Collections.Generic.IEnumerable{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerable
            and sends them to the recipients.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Collections.Generic.IEnumerable{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerable
            and sends them to the recipients.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerator
            and sends them to the recipients.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Collections.Generic.IEnumerator{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerator
            and sends them to the recipients.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Collections.Generic.IEnumerator{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerator
            and sends them to the recipients.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.#ctor(System.Func{`0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            The Sniper fetches messages/objects from the given IEnumerable
            and sends them to the recipients.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.SendTo(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            Sends messages/objects to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.SendTo(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            Sends messages/objects to the given recipients.
            </summary>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.AsTask(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Create as task for the message/object fireing.
            </summary>
            <param name="TaskCreationOption">Specifies flags that control optional behavior for the creation and execution of tasks.</param>
            <returns>The created task.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.StartFireing">
            <summary>
            Starts the fireing.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sniper`1.StartToFire(System.Boolean)">
            <summary>
            Starts the sniper fire!
            </summary>
            <param name="StartAsTask">Whether to run within a seperate task or not.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.InitialDelay">
            <summary>
            The initial delay before starting to fire asynchronously.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.IsTask">
            <summary>
            Whether the sniper is running as its own task or not.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.FireCancellationTokenSource">
            <summary>
            Signals to a FireCancellationToken that it should be canceled.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.FireCancellationToken">
            <summary>
            Propogates notification that the asynchronous fireing should be canceled.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.FireTask">
            <summary>
            The internal task for fireing the messages/objects.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.Intervall">
            <summary>
            The intervall will throttle the automatic measurement of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sniper`1.LastFireTime">
            <summary>
            The last time the sniper fired.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sniper`1.OnMessageAvailable">
            <summary>
            An event for message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sniper`1.OnCompleted">
            <summary>
            An event for signaling the completion of a message delivery.
            </summary>
        </member>
        <member name="E:de.ahzf.Vanaheimr.Styx.Sniper`1.OnError">
            <summary>
            An event for signaling an exception.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.#ctor(`0,`0)">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.#ctor(`0,`0,de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.#ctor(`0,`0,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.Min">
            <summary>
            The minimum of the passed values.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.MinMaxArrow`1.Max">
            <summary>
            The maximum of the passed values.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.BlockingCollection">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.#ctor">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Func">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.#ctor(de.ahzf.Vanaheimr.Styx.INotification{`0})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="Func">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ToIEnumerable`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2">
            <summary>
            A generic sensor.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the returned sensor data.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.InternalSensor">
            <summary>
            The internal sensor.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1})">
            <summary>
            A sensor based on another ISensor&lt;TId, TValue&gt;.
            All needed information will be taken from the wrapped sensor.
            </summary>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an IEnumerator.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.GetEnumerator" -->
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Reset">
            <summary>
            Reset the sensor.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Equals(System.Object)">
            <summary>
            Compares two instances of this object.
            </summary>
            <param name="Object">An object to compare with.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Equals(`0)">
            <summary>
            Compares the Ids of two sensors for equality.
            </summary>
            <param name="OtherId">Another sensor Id.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Equals(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1})">
            <summary>
            Compares two sensors for equality.
            </summary>
            <param name="OtherChargePoint">Another sensor.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.CompareTo(System.Object)">
            <summary>
            Compares the Ids of two sensors.
            </summary>
            <param name="Object">Another sensor Id.</param>
            <returns>0 if equal, -1, 1 otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.CompareTo(`0)">
            <summary>
            Compares the Ids of two sensors.
            </summary>
            <param name="OtherId">Another sensor Id.</param>
            <returns>0 if equal, -1, 1 otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.CompareTo(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1})">
            <summary>
            Compares two sensors.
            </summary>
            <param name="OtherSensor">Another sensor.</param>
            <returns>0 if equal, -1, 1 otherwise.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.GetHashCode">
            <summary>
            Return the HashCode of this object.
            </summary>
            <returns>The HashCode of this object.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Dispose">
            <summary>
            Dispose this pbject.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Id">
            <summary>
            A unique identification of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Name">
            <summary>
            The user-friendly name of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Description">
            <summary>
            An description of this sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.ValueUnit">
            <summary>
            The unit of the value (m, m², °C, °F, MBytes, ...).
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.IsActive">
            <summary>
            Whether this sensor is active or passive.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.MeasurementIntervall">
            <summary>
            The intervall will throttle the measurements of passive
            sensors and the event notifications of active sensors.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.ThrottlingSleepDuration">
            <summary>
            The amount of time in milliseconds a passive sensor
            will sleep if it is in throttling mode.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.InitializationTimestamp">
            <summary>
            The timestamp when this sensor was initialized.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Now">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.LastMeasurementAt">
            <summary>
            The timestamp of the last time this sensor invoked a measurement.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.NextMeasurementAt">
            <summary>
            The timestamp of the next time this sensor will invoked a measurement.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.Current">
            <summary>
            The current value of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.CurrentValue">
            <summary>
            Invokes a new measurement and return the current value of the sensor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.TimestampedSensor`2.TimestampedValue">
            <summary>
            The current value of this sensor and its measurement timestamp.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessorCounters.ProcessorTotalTimeSensor">
            <summary>
            A sensor measuring the total usage time of the processors.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessorCounters.ProcessorTotalTimeSensor`1">
            <summary>
            A sensor measuring the total usage time of the processors.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessorCounters.ProcessorTotalTimeSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor measuring the total usage time of the processors.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessorCounters.ProcessorTotalTimeSensor.#ctor(System.String)">
            <summary>
            A sensor measuring the total usage time of the processors.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessorCounters.ProcessorTotalTimeSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor measuring the total usage time of the processors.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessorCounters.ProcessorTotalTimeSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor measuring the total usage time of the processors.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IdentityPipe`1">
            <summary>
            The IdentityPipe is the most basic pipe.
            It simply maps the input to the output without any processing.
            This Pipe is useful in various test case situations.
            </summary>
            <typeparam name="S">The type of the elements within the pipe.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FutureFilterPipe`1">
            <summary>
            FutureFilterPipe will allow an object to pass through it if the
            object has an output from the pipe provided in the constructor
            of the FutureFilterPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FutureFilterPipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe)">
            <summary>
            Creates a new FutureFilterPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FutureFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FutureFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FixLineBreaksPipe.#ctor(System.Text.RegularExpressions.Regex,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="StartOfNewLineRegExpr">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="IEnumerator">An enumerator of lines.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FixLineBreaksPipe.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Sometimes there are unwanted new line characters within CSV files.
            This pipe tries to detect real new lines based on the given regular expression
            and concatenates the dangling lines using the given NewLineSeperator.
            </summary>
            <param name="StartOfNewLineRegExprString">A regular expression detecting real new lines.</param>
            <param name="NewLineSeperator">The new line seperator between the prior dangling lines.</param>
            <param name="IEnumerable">An enumeration of lines.</param>
            <param name="IEnumerator">An enumerator of lines.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FixLineBreaksPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FixLineBreaksPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IdentityArrowExtensions">
            <summary>
            The IdentityArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrowExtensions.IdentityArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0})">
            <summary>
            The IdentityArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrowExtensions.IdentityArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The IdentityArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IdentityArrowExtensions.IdentityArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The IdentityArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IEnumeratorExtensions">
            <summary>
            Extension methods for the IEnumerator interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IEnumeratorExtensions.ToSniper``1(System.Collections.Generic.IEnumerator{``0},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new Sniper fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TMessage">The type of the emitted messages/objects.</typeparam>
            <param name="IEnumerator">An enumerator of messages/objects to send.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the sniper within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper in milliseconds.</param>
            <returns>A new Sniper.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ActionArrow`1">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrow`1.#ctor(System.Action{`0})">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrow`1.#ctor(System.Action{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrow`1.#ctor(System.Action{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrow`1">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrow`1.#ctor">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrow`1.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrow`1.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The DuplicateFilterArrow will not allow a duplicate object to pass through it.
            This is accomplished by the Arrow maintaining an internal HashSet that is used
            to store a history of previously seen objects.
            Thus, the more unique objects that pass through this Arrow, the slower it
            becomes as a log_2 index is checked for every object.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.DuplicateFilterArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessProcessorTimeSensor">
            <summary>
            A sensor measuring the processor usage time of this process.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessProcessorTimeSensor`1">
            <summary>
            A sensor measuring the processor usage time of this process.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessProcessorTimeSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor measuring the processor usage time of this process.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessProcessorTimeSensor.#ctor(System.String)">
            <summary>
            A sensor measuring the processor usage time of this process.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessProcessorTimeSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor measuring the processor usage time of this process.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.ProcessCounters.ProcessProcessorTimeSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor measuring the processor usage time of this process.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceSensor`1">
            <summary>
            A generic network interface sensor.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceSensor`1.#ctor(`0,System.String,de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter)">
            <summary>
            Creates a new generic network interface sensor.
            </summary>
            <param name="SensorName">The well-known name of the sensor.</param>
            <param name="NetworkInterfaceCounter">A network interface counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceSensor`1.#ctor(`0,System.String,System.String,de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.NetworkInterfaceCounter)">
            <summary>
            Creates a new generic network interface sensor.
            </summary>
            <param name="SensorName">The well-known name of the sensor.</param>
            <param name="NetworkInterface">The name of network interface.</param>
            <param name="NetworkInterfaceCounter">A network interface counter.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.HasNextPipe`1">
            <summary>
            HasNextPipe 
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HasNextPipe`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe)">
            <summary>
            Creates a new HasNextPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HasNextPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CSVReaderPipe">
            <summary>
            Splits a given strings into elements by a given sperator.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVReaderPipe.#ctor(System.Text.RegularExpressions.Regex,System.String[],System.StringSplitOptions,System.Nullable{System.UInt16},System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Splits a given strings into elements by a given sperator.
            </summary>
            <param name="IgnoreLines">A regular expression indicating which input strings should be ignored. Default: All lines starting with a '#'.</param>
            <param name="Seperators">An array of string used to split the input strings.</param>
            <param name="StringSplitOptions">Split options, e.g. remove empty entries.</param>
            <param name="ExpectedNumberOfColumns">If the CSV file had a schema, a specific number of columns can be expected. If instead it is a list of values no such value can be expected.</param>
            <param name="FailOnWrongNumberOfColumns">What to do when the current and expected number of columns do not match.</param>
            <param name="TrimColumns">Remove leading and trailing whitespaces.</param>
            <param name="IEnumerable">An optional enumeration of strings as element source.</param>
            <param name="IEnumerator">An optional enumerator of strings as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVReaderPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVReaderPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.BackFilterPipeExtensions">
            <summary>
            Extension methods for the BackFilterPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.BackFilterPipeExtensions.BackFilter``2(de.ahzf.Vanaheimr.Styx.IPipe{``1,``0},System.UInt64)">
            <summary>
            Returns the incomming vertices of the given PropertyEdges.
            </summary>
            <param name="IEnumerable">An enumeration of PropertyEdges.</param>
            <param name="VertexFilter">An optional delegate for vertex filtering.</param>
            <returns>The incomming vertices of the given PropertyEdges.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.BackFilterPipe`2">
            <summary>
            BackFilterPipe will fully process the object through its internal pipe.
            If the internal pipe yields results, then the original object is emitted
            from the BackFilterPipe.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.IArrowReceiverExtensions">
            <summary>
            Extension methods for the IArrowReceiver interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.IArrowReceiverExtensions.ReceiveMessage``1(de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},``0)">
            <summary>
            Accepts a message of type TIn from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <typeparam name="TMessage">The type of the consuming messages/objects.</typeparam>
            <param name="ArrowReceiver">The receiver of the message.</param>
            <param name="Message">The message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.StdDevArrow">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrow.#ctor">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrow.#ctor(de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Tuple{System.Double,System.Double,System.Double}},de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Tuple{System.Double,System.Double,System.Double}}[])">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrow.#ctor(de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Tuple{System.Double,System.Double,System.Double}},de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Tuple{System.Double,System.Double,System.Double}}[])">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrow.ProcessMessage(System.Double,System.Tuple{System.Double,System.Double,System.Double}@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrow.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor">
            <summary>
            A sensor returning Sinus numbers.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1">
            <summary>
            A sensor returning Sinus numbers.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor returning Sinus numbers.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.Arc">
            <summary>
            The current arc of the sinus.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.Frequency">
            <summary>
            The frequency of the sinus wave.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.Amplitude">
            <summary>
            The amplitude of the sinus wave.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.XOffset">
            <summary>
            The XOffset of the arc of the sinus wave.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor`1.YOffset">
            <summary>
            The YOffset of the sinus wave.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor.#ctor(System.String)">
            <summary>
            A sensor returning a sinus curve.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor returning sinus curve.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Simple.SinusSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor returning sinus curve.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.GatherPipe`1">
            <summary>
            GatherPipe 
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2">
            <summary>
            The SideEffectCapPipe will yield an E that is the side effect of
            the provided SideEffectPipe. This is useful for when the side
            effect of a Pipe is desired in a computational stream.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="T">The type of the sideeffect.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.#ctor">
            <summary>
            Creates a new SideEffectCapPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.#ctor(de.ahzf.Vanaheimr.Styx.ISideEffectPipe{`0,`0,`1})">
            <summary>
            Creates a new SideEffectCapPipe.
            </summary>
            <param name="PipeToCap">A ISideEffectCapPipe.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.SideEffectCapPipe`2.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.GatherPipe`1.#ctor">
            <summary>
            Creates a new GatherPipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.StartPipe`1">
            <summary>
            StartPipe is a handy was to create a pipe out of the provided object.
            The provided object is set as the start of the Pipe that simply returns the object or
            If the object is an IEnumerator/IEnumerable, the objects of the object.
            </summary>
            <typeparam name="S">The type of the consuming object.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StartPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SplitPipe`1">
            <summary>
            Converts the consuming objects to emitting objects
            by calling a Func&lt;S, E&gt;.
            </summary>
            <typeparam name="S">The type of the consuming and emitting objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.SplitPipe`1._InternalEnumerator">
            <summary>
            The internal enumerator of the collection.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.SplitPipe`1._CurrentElement">
            <summary>
            The internal current element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SplitPipe`1.#ctor(System.Byte,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new FuncPipe using the given Func&lt;S, E&gt;.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SplitPipe`1.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SplitPipe`1.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SplitPipe`1.MoveNext(System.Byte)">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5">
            <summary>
            An AbstractSideEffectPipe provides the same functionality as the 
            AbstractPipe, but produces a side effect which can be retrieved
            by the SideEffect property.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
            <typeparam name="T3">The type of the third sideeffect.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`5">
            <summary>
            This SideEffectPipe will produce two side effects which can
            be retrieved by the SideEffect properties.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
            <typeparam name="T1">The type of the first sideeffect.</typeparam>
            <typeparam name="T2">The type of the second sideeffect.</typeparam>
            <typeparam name="T3">The type of the third sideeffect.</typeparam>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`5.SideEffect1">
            <summary>
            The first SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`5.SideEffect2">
            <summary>
            The second SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ISideEffectPipe`5.SideEffect3">
            <summary>
            The third SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5._SideEffect1">
            <summary>
            The first SideEffect produced by this Pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5._SideEffect2">
            <summary>
            The second SideEffect produced by this Pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5._SideEffect3">
            <summary>
            The third SideEffect produced by this Pipe.
            Use this reference for operations like:
            Interlocked.Increment(ref _SideEffect);
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor">
            <summary>
            Creates a new AbstractSideEffectPipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new AbstractSideEffectPipe using the elements
            emitted by the given IEnumerator as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5.SideEffect1">
            <summary>
            The first SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5.SideEffect2">
            <summary>
            The second SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractSideEffectPipe`5.SideEffect3">
            <summary>
            The third SideEffect produced by this Pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.StdDevArrowExtensions">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrowExtensions.StdDevArrow(de.ahzf.Vanaheimr.Styx.IArrowSender{System.Double})">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrowExtensions.StdDevArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{System.Double},de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Tuple{System.Double,System.Double,System.Double}},de.ahzf.Vanaheimr.Styx.MessageRecipient{System.Tuple{System.Double,System.Double,System.Double}}[])">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.StdDevArrowExtensions.StdDevArrow(de.ahzf.Vanaheimr.Styx.IArrowSender{System.Double},de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Tuple{System.Double,System.Double,System.Double}},de.ahzf.Vanaheimr.Styx.IArrowReceiver{System.Tuple{System.Double,System.Double,System.Double}}[])">
            <summary>
            The StdDevArrow consumes doubles and emitts the
            sliding standard deviation and the average of
            messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.INewFilterArrow">
            <summary>
            A FilterArrow is much like the IdentityArrow, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.INewFilterArrow`1">
            <summary>
            A FilterArrow is much like the IdentityArrow, but may or may not filter 
            some of the messages/objects instead of emitting everything.
            </summary>
            <typeparam name="TMessage">The type of the consuming messages/objects.</typeparam>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.SystemCounters.FreeRAMSensor">
            <summary>
            A sensor measuring the available amount of physical memory in MBytes.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.SystemCounters.FreeRAMSensor`1">
            <summary>
            A sensor measuring the available amount of physical memory in MBytes.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.SystemCounters.FreeRAMSensor`1.#ctor(`0,System.String)">
            <summary>
            A sensor measuring the available amount of physical memory in MBytes.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.SystemCounters.FreeRAMSensor.#ctor(System.String)">
            <summary>
            A sensor measuring the available amount of physical memory in MBytes.
            </summary>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.SystemCounters.FreeRAMSensor.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.SensorId,System.String)">
            <summary>
            A sensor measuring the available amount of physical memory in MBytes.
            </summary>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.SystemCounters.FreeRAMSensor.#ctor(System.UInt64,System.String)">
            <summary>
            A sensor measuring the available amount of physical memory in MBytes.
            </summary>
            <param name="SensorId_UInt64">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.SensorIsStartingEventHandler`1">
            <summary>
            An event handler used whenever an active sensor is
            starting its measurements.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <param name="Sensor">The sensor sending this event.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.SensorStartedEventHandler`1">
            <summary>
            An event handler used whenever an active sensor
            started its measurements.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <param name="Sensor">The sensor sending this event.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.SensorIsStoppingEventHandler`1">
            <summary>
            An event handler used whenever an active sensor is
            stopping its measurements.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <param name="Sensor">The sensor sending this event.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.SensorStoppedEventHandler`1">
            <summary>
            An event handler used whenever an active sensor has
            stopped its measurements.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <param name="Sensor">The sensor sending this event.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2">
            <summary>
            A generic active sensor.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the returned sensor data.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.IEnumerator">
            <summary>
            The internal TValue enumerator.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor based on a passive ISensor&lt;TId, TValue&gt;.
            All needed information will be taken from the wrapped sensor.
            </summary>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor based on a passive ISensor&lt;TId, TValue&gt;.
            All needed information will be taken from the wrapped sensor.
            </summary>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(de.ahzf.Vanaheimr.Styx.Sensors.ISensor{`0,`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor based on a passive ISensor&lt;TId, TValue&gt;.
            All needed information will be taken from the wrapped sensor.
            </summary>
            <param name="ISensor">An ISensor&lt;TId, TValue&gt;.</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(System.Collections.Generic.IEnumerable{`1},`0,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor.
            </summary>
            <param name="IEnumerable">An enumeration of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(System.Collections.Generic.IEnumerable{`1},`0,System.String,System.String,de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor.
            </summary>
            <param name="IEnumerable">An enumeration of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(System.Collections.Generic.IEnumerable{`1},`0,System.String,System.String,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor.
            </summary>
            <param name="IEnumerable">An enumeration of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(System.Collections.Generic.IEnumerator{`1},`0,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor.
            </summary>
            <param name="IEnumerator">An enumerator of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(System.Collections.Generic.IEnumerator{`1},`0,System.String,System.String,de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor.
            </summary>
            <param name="IEnumerator">An enumerator of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.#ctor(System.Collections.Generic.IEnumerator{`1},`0,System.String,System.String,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            An active sensor.
            </summary>
            <param name="IEnumerator">An enumerator of TValues.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.MoveNext">
            <summary>
            The current value of this performance counter.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.Sensors.Active.ActiveSensor`2.InitialDelay">
            <summary>
            The initial delay before starting to fire asynchronously.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.HasCountPipe`1">
            <summary>
            The pipe must emit at least min and not more than max elements.
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HasCountPipe`1.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new HasCountPipe.
            </summary>
            <param name="Minimum">Minimal number of elements. Use -1 for no minimum.</param>
            <param name="Maximum">Maximal number of elements. Use -1 for no maximum.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HasCountPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1">
            <summary>
            A HistoryEnumerator wraps and behaves like a classical IEnumerator.
            However, it will remember what was last returned out of the IEnumerator.
            </summary>
            <typeparam name="T">The type of the stored elements.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new HistoryEnumerator based on the given enumerator.
            </summary>
            <param name="IEnumerator">The enumerator to be wrapped.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new HistoryEnumerator based on the given enumerable.
            </summary>
            <param name="IEnumerable">The enumerable to be wrapped.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.Dispose">
            <summary>
            Dispose this enumerator.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.Last">
            <summary>
            Return the last element of the internal IEnumertor&lt;T&gt;.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.HistoryEnumerator`1.de#ahzf#Vanaheimr#Styx#IHistoryEnumerator#Last">
            <summary>
            Return the last element of the internal IEnumertor.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CSV">
            <summary>
            Utilities to read and write CSV files.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSV.GetLines(System.IO.StreamReader)">
            <summary>
            Yields one line from the given stream reader.
            </summary>
            <param name="StreamReader">The stream to read the lines from.</param>
            <returns>A single line.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSV.GetMultipleLines(System.IO.StreamReader,System.Int32)">
            <summary>
            Yields multiple lines from the given stream reader.
            </summary>
            <param name="StreamReader">The stream to read the lines from.</param>
            <param name="NumberOfLines">The number of lines to read at once.</param>
            <returns>Multiple lines.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.SkipArrowExtensions">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrowExtensions.SkipArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.UInt32)">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrowExtensions.SkipArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.UInt32,de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.SkipArrowExtensions.SkipArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.UInt32,de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The SkipArrow simply sends the incoming message to the recipients
            without any processing, but skips the first n messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="NumberOfMessagesToSkip">The number of messages to skip.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.BlockingCollection">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.MessageProcessor">
            <summary>
            A delegate for transforming incoming messages into outgoing messages.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.ArrowSenderTask">
            <summary>
            The internal arrow sender task.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.#ctor(System.Func{`0,`1})">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.#ctor(System.Func{`0,`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`1}[])">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.#ctor(System.Func{`0,`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`1}[])">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.ReceiveMessage(System.Object,`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ConcurrentFuncArrow`2.MaxQueueSize">
            <summary>
            The maximum number of queued messages.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CombineArrow`3">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn1">The type of the first consuming messages/objects.</typeparam>
            <typeparam name="TIn2">The type of the second consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.CombineArrow`3.Queue1">
            <summary>
            A concurrent queue as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.CombineArrow`3.Queue2">
            <summary>
            A concurrent queue as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.CombineArrow`3.MessageProcessor">
            <summary>
            A delegate for transforming two incoming messages into a single outgoing message.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.CombineArrow`3.ArrowSenderTask">
            <summary>
            The internal arrow sender task.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CombineArrow`3.#ctor(System.Func{`0,`1,`2},de.ahzf.Vanaheimr.Styx.IArrowSender{`0},de.ahzf.Vanaheimr.Styx.IArrowSender{`1})">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="MessageProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="ArrowSender1">An optional first arrow sender.</param>
            <param name="ArrowSender2">An optional second arrow sender.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CombineArrow`3.#ctor(System.Func{`0,`1,`2},de.ahzf.Vanaheimr.Styx.IArrowSender{`0},de.ahzf.Vanaheimr.Styx.IArrowSender{`1},de.ahzf.Vanaheimr.Styx.MessageRecipient{`2}[])">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="MessageProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="ArrowSender1">An optional first arrow sender.</param>
            <param name="ArrowSender2">An optional second arrow sender.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CombineArrow`3.#ctor(System.Func{`0,`1,`2},de.ahzf.Vanaheimr.Styx.IArrowSender{`0},de.ahzf.Vanaheimr.Styx.IArrowSender{`1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`2}[])">
            <summary>
            An arrow for transforming two incoming messages into a single outgoing message.
            </summary>
            <param name="MessageProcessor">A delegate for transforming two incoming messages into a single outgoing message.</param>
            <param name="ArrowSender1">An optional first arrow sender.</param>
            <param name="ArrowSender2">An optional second arrow sender.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.CombineArrow`3.MaxQueueSize">
            <summary>
            The maximum number of queued messages for both arrow senders.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.CombineArrow`3.MultiThreadedSender">
            <summary>
            The arrow sender will use a seperate task.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ArrowObject`1">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="T">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ArrowObject`1.#ctor(`0)">
            <summary>
            An object sending notifications when its value changed.
            </summary>
            <param name="Value">The value of the object.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ArrowObject`1.#ctor(`0,de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            An object sending notifications when its value changed.
            </summary>
            <param name="Value">The value of the object.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ArrowObject`1.#ctor(`0,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            An object sending notifications when its value changed.
            </summary>
            <param name="Value">The value of the object.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ArrowObject`1.op_Implicit(de.ahzf.Vanaheimr.Styx.ArrowObject{`0})~`0">
            <summary>
            Implicit conversion from ArrowObject to T
            </summary>
            <param name="ArrowObject">An ArrowObject.</param>
            <returns>The value of the ArrowObject.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ArrowObject`1.op_Implicit(`0)~de.ahzf.Vanaheimr.Styx.ArrowObject{`0}">
            <summary>
            Implicit conversion from T to ArrowObject
            </summary>
            <param name="Value">A value.</param>
            <returns>A new ArrowObject.</returns>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.ArrowObject`1.Value">
            <summary>
            The value of the ArrowObject.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CountArrow`1">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrow`1.#ctor(System.Int64)">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="InitialValue">The initial value of the counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrow`1.#ctor(System.Int64,de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="InitialValue">The initial value of the counter.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrow`1.#ctor(System.Int64,de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="InitialValue">The initial value of the counter.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrow`1.ToString">
            <summary>
            Returns a string representation of this Arrow.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncFilter`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilter`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilter`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CountPipe`1">
            <summary>
            The CountPipe produces a side effect that is the total
            number of objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountPipe`1.#ctor(System.Int64,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new CountPipe.
            </summary>
            <param name="InitialValue">An optional initial value.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;Double&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;Double&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountPipe`1.ToString">
            <summary>
            Returns a string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1">
            <summary>
            A MultiEnumerator takes multiple IEnumerators in its constructor
            and makes them behave like a single enumerator.
            The order in which objects are returned from both enumerators are with
            respect to the order of the enumerators passed into the constructor.
            </summary>
            <typeparam name="T">The type of the stored elements.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0}[])">
            <summary>
            Creates a new MultiEnumerator based on the given myIEnumerators.
            </summary>
            <param name="myIEnumerators">The enumerators to be wrapped.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerator{`0}})">
            <summary>
            Creates a new MultiEnumerator based on the given myIEnumerators.
            </summary>
            <param name="myIEnumerators">The enumerators to be wrapped.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.Dispose">
            <summary>
            Dispose this enumerator.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.Current">
            <summary>
            Return the current element of the current IEnumertor.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.MultiEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Return the current element of the internal IEnumertor.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ComparisonFilter">
            <summary>
            An enum for pipe filtering purposes.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ComparisonFilter.EQUAL">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ComparisonFilter.NOT_EQUAL">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ComparisonFilter.GREATER_THAN">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ComparisonFilter.LESS_THAN">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ComparisonFilter.GREATER_THAN_EQUAL">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.ComparisonFilter.LESS_THAN_EQUAL">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CountArrowExtensions">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrowExtensions.Count``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Int64)">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="InitialValue">The initial value of the counter.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrowExtensions.Count``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Int64,de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="InitialValue">The initial value of the counter.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CountArrowExtensions.Count``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Int64,de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The CountArrow produces a side effect that is the total
            number of messages/objects that have passed through it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="InitialValue">The initial value of the counter.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncFilterArrowExtensions">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrowExtensions.FuncFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrowExtensions.FuncFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Func{``0,System.Boolean},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrowExtensions.FuncFilter``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Func{``0,System.Boolean},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.NewConcurrentFuncArrow`2">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.NewConcurrentFuncArrow`2.BlockingCollection">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.NewConcurrentFuncArrow`2.MessageProcessor">
            <summary>
            A delegate for transforming incoming messages into outgoing messages.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.NewConcurrentFuncArrow`2.ArrowSenderTask">
            <summary>
            The internal arrow sender task.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.NewConcurrentFuncArrow`2.#ctor(System.Func{`0,`1})">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.NewConcurrentFuncArrow`2.MaxQueueSize">
            <summary>
            The maximum number of queued messages.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <typeparam name="TIn">The type of the consuming messages/objects.</typeparam>
            <typeparam name="TOut">The type of the emitted messages/objects.</typeparam>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1.BlockingCollection">
            <summary>
            A blocking collection as inter-thread message pipeline.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1.MessageProcessor">
            <summary>
            A delegate for transforming incoming messages into outgoing messages.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1.ArrowSenderTask">
            <summary>
            The internal arrow sender task.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1.#ctor(System.Action{`0})">
            <summary>
            An arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="MessageProcessor">A delegate for transforming incoming messages into outgoing messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1.ReceiveMessage(System.Object,`0)">
            <summary>
            Accepts a message of type S from a sender for further processing
            and delivery to the subscribers.
            </summary>
            <param name="Sender">The sender of the message.</param>
            <param name="MessageIn">The message.</param>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AsTaskArrow`1.MaxQueueSize">
            <summary>
            The maximum number of queued messages.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct">
            <summary>
            A struct collecting received and sent packets and bytes.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.PacketsReceived">
            <summary>
            The packets received.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.PacketsSent">
            <summary>
            The packets sent.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.BytesReceived">
            <summary>
            The bytes received.
            </summary>
        </member>
        <member name="F:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.BytesSent">
            <summary>
            The bytes sent.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a new TransmissionsStruct based on the given Single values.
            </summary>
            <param name="myPacketsReceived">The packets received.</param>
            <param name="myPacketsSent">The packets sent.</param>
            <param name="myBytesReceived">The bytes received.</param>
            <param name="myBytesSent">The bytes sent.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Generates a new TransmissionsStruct based on the given UInt64 values.
            </summary>
            <param name="myPacketsReceived">The packets received.</param>
            <param name="myPacketsSent">The packets sent.</param>
            <param name="myBytesReceived">The bytes received.</param>
            <param name="myBytesSent">The bytes sent.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.PerformanceCounters.NetworkInterfaceCounters.TransmissionsStruct.ToString">
            <summary>
            Converts this TransmissionsStruct to its string representation.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CharacterCountPipe">
            <summary>
            Returns the number of characters of a string. 
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CharacterCountPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ObjectFilterPipe`1">
            <summary>
            The ObjectFilterPipe will either allow or disallow all objects that pass
            through it depending on the result of the compareObject() method.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ObjectFilterPipe`1.#ctor(`0,de.ahzf.Vanaheimr.Styx.ComparisonFilter)">
            <summary>
            Create a new ObjectFilterPipe.
            </summary>
            <param name="myObject">The Object.</param>
            <param name="myComparisonFilter">The filter to use.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ObjectFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ObjectFilterPipe`1.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.OpenStreamPipe">
            <summary>
            The OpenStreamPipe opens the given files
            and returns a stream of bytes.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.OpenStreamPipe.#ctor(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.UInt32,System.IO.FileOptions,System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Collections.Generic.IEnumerator{System.IO.FileInfo})">
            <summary>
            Opens the given files and returns a stream of bytes.
            </summary>
            <param name="FileMode">A System.IO.FileMode constant that determines how to open or create the file.</param>
            <param name="FileAccess">A System.IO.FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the System.IO.FileStream.CanRead and System.IO.FileStream.CanWrite properties of the FileStream object. System.IO.FileStream.CanSeek is true if path specifies a disk file.</param>
            <param name="FileShare">A System.IO.FileShare constant that determines how the file will be shared by processes.</param>
            <param name="BufferSize">A positive System.Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="FileOptions">A System.IO.FileOptions value that specifies additional file options.</param>
            <param name="IEnumerable">An optional enumation of directories as element source.</param>
            <param name="IEnumerator">An optional enumerator of directories as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.OpenStreamPipe.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.OpenStreamPipe.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CSVReaderMetaPipe">
            <summary>
            The CSVMetaPipe splits the lines of the found csv files into pieces.
            </summary>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2">
            <summary>
            An AbstractPipe provides most of the functionality that is repeated
            in every instance of a Pipe. Any subclass of AbstractPipe should simply
            implement MoveNext().
            </summary>
            <typeparam name="S">The type of the consuming objects.</typeparam>
            <typeparam name="E">The type of the emitting objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.#ctor">
            <summary>
            Creates a AbstractPipe pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.#ctor(de.ahzf.Vanaheimr.Styx.IPipe[],System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new AbstractPipe using the elements emitted
            by the given IEnumerator as input.
            </summary>
            <param name="InternalPipes">The array of all wrapped pipes.</param>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSource(System.Object)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.SetSource(`0)">
            <summary>
            Set the given element as source.
            </summary>
            <param name="SourceElement">A single source element.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSource(System.Collections.IEnumerator)">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.SetSource(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Set the elements emitted by the given IEnumerator&lt;S&gt; as input.
            </summary>
            <param name="IEnumerator">An IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.de#ahzf#Vanaheimr#Styx#IStartPipe#SetSourceCollection(System.Collections.IEnumerable)">
            <summary>
            Set the elements emitted from the given IEnumerable as input.
            </summary>
            <param name="IEnumerable">An IEnumerable as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.SetSourceCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set the elements emitted from the given IEnumerable&lt;S&gt; as input.
            </summary>
            <param name="IEnumerable">An IEnumerable&lt;S&gt; as element source.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator&lt;E&gt; that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.Dispose">
            <summary>
            Disposes this pipe.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.ToString">
            <summary>
            A string representation of this pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.Path">
            <summary>
            Returns the transformation path to arrive at the current object
            of the pipe. This is a list of all of the objects traversed for
            the current iterator position of the pipe.
            </summary>
        </member>
        <member name="P:de.ahzf.Vanaheimr.Styx.AbstractMetaPipe`2.Pipes">
            <summary>
            A list of all wrapped pipes
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CSVReaderMetaPipe.#ctor(System.String,System.IO.SearchOption,de.ahzf.Vanaheimr.Styx.FileFilter,System.Text.RegularExpressions.Regex,System.String[],System.StringSplitOptions,System.Nullable{System.UInt16},System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            The CSVMetaPipe splits the lines of the found csv files into pieces.
            </summary>
            <param name="SearchPattern">A simple search pattern like "*.jpg".</param>
            <param name="SearchOption">Include or do not include subdirectories.</param>
            <param name="FileFilter">A delegate for filtering the found files.</param>
            <param name="IgnoreLines">A regular expression indicating which input strings should be ignored. Default: All lines starting with a '#'.</param>
            <param name="Seperators">An array of string used to split the input strings.</param>
            <param name="StringSplitOptions">Split options, e.g. remove empty entries.</param>
            <param name="ExpectedNumberOfColumns">If the CSV file had a schema, a specific number of columns can be expected. If instead it is a list of values no such value can be expected.</param>
            <param name="FailOnWrongNumberOfColumns">What to do when the current and expected number of columns do not match.</param>
            <param name="IEnumerable">An optional IEnumerable&lt;S&gt; as element source.</param>
            <param name="IEnumerator">An optional IEnumerator&lt;S&gt; as element source.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.CollectionFilterPipe`1">
            <summary>
            A CollectionFilterPipe will take a collection of objects and
            a Filter.NOT_EQUAL or Filter.EQUAL argument.
            If an incoming object is contained (or not contained) in the
            provided collection, then it is emitted (or not emitted).
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CollectionFilterPipe`1.#ctor(System.Collections.Generic.IEnumerable{`0},de.ahzf.Vanaheimr.Styx.ComparisonFilter)">
            <summary>
            A CollectionFilterPipe will take a collection of objects and
            a Filter.NOT_EQUAL or Filter.EQUAL argument.
            If an incoming object is contained (or not contained) in the
            provided collection, then it is emitted (or not emitted).
            </summary>
            <param name="myIEnumerable">The IEnumerable for filtering.</param>
            <param name="myComparisonFilter">The ComparisonFilter used for filtering.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CollectionFilterPipe`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.CollectionFilterPipe`1.CompareObjects(`0,`0)">
            <summary>
            Compares two objects.
            </summary>
            <param name="myLeftObject">The left object.</param>
            <param name="myRightObject">The right object.</param>
            <returns>A match based on the defined filter.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.AggregatorArrowExtensions">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrowExtensions.Aggregator``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ICollection">An optional ICollection to store the passed messages/objects.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrowExtensions.Aggregator``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Collections.Generic.ICollection{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ICollection">An optional ICollection to store the passed messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.AggregatorArrowExtensions.Aggregator``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Collections.Generic.ICollection{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The AggregatorArrow produces a side effect that is the provided collection
            filled with the contents of all the objects that have passed through it.
            The collection enumerator is used as the emitting enumerator. Thus, what
            goes into AggregatorArrow may not be the same as what comes out of
            AggregatorPipe.
            For example, duplicates removed, different order to the stream, etc.
            Finally, note that different Collections have different behaviors and
            write/read times.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="ICollection">An optional ICollection to store the passed messages/objects.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncFilterArrow`1">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <typeparam name="TMessage">The type of the consuming and emitting messages/objects.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrow`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrow`1.#ctor(System.Func{`0,System.Boolean},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0},de.ahzf.Vanaheimr.Styx.MessageRecipient{`0}[])">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrow`1.#ctor(System.Func{`0,System.Boolean},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{`0}[])">
            <summary>
            Filters the consuming objects by calling a Func&lt;S, Boolean&gt;.
            </summary>
            <param name="FilterFunc">A Func&lt;S, Boolean&gt; filtering the consuming objects. True means filter (ignore).</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">The recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncFilterArrow`1.ProcessMessage(`0,`0@)">
            <summary>
            Process the incoming message and return an outgoing message.
            </summary>
            <param name="MessageIn">The incoming message.</param>
            <param name="MessageOut">The outgoing message.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumerableExtensions">
            <summary>
            Extension methods for the IEnumerable interface.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumerableExtensions.ToSensor``2(System.Collections.Generic.IEnumerable{``1},``0,System.String,System.String)">
            <summary>
            Creates a new sensor returning the content of the given IEnumerable.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerable">An enumeration of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <returns>A new ISensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumerableExtensions.ToActiveSensor``2(System.Collections.Generic.IEnumerable{``1},``0,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerable">An enumeration of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumerableExtensions.ToActiveSensor``2(System.Collections.Generic.IEnumerable{``1},``0,System.String,System.String,de.ahzf.Vanaheimr.Styx.MessageRecipient{``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerable">An enumeration of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Sensors.Active.IEnumerableExtensions.ToActiveSensor``2(System.Collections.Generic.IEnumerable{``1},``0,System.String,System.String,de.ahzf.Vanaheimr.Styx.IArrowReceiver{``1},System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ActiveSensor fireing the content of the given IEnumerable.
            </summary>
            <typeparam name="TId">The type of the unique identification.</typeparam>
            <typeparam name="TValue">The type of the measured value.</typeparam>
            <param name="IEnumerable">An enumeration of messages/objects to send.</param>
            <param name="SensorId">The unique identification of the sensor.</param>
            <param name="SensorName">The name of the sensor.</param>
            <param name="ValueUnit">The unit of the value (m, m², °C, °F, MBytes, ...).</param>
            <param name="Recipient">A recipient of the processed measurements.</param>
            <param name="Autostart">Start the sniper automatically.</param>
            <param name="StartAsTask">Start the ActiveSensor within its own task.</param>
            <param name="InitialDelay">Set the initial delay of the sniper.</param>
            <returns>A new IActiveSensor&lt;TId, TValue&gt;.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1">
            <summary>
            The AndFilterPipe takes a collection of pipes, where E is boolean.
            Each provided pipe is fed the same incoming S object concurrently.
            If all the pipes emit true, then the AndFilterPipe emits the
            incoming S object. If not, then the incoming S object is not emitted.
            </summary>
            <typeparam name="S">The type of the elements within the filter.</typeparam>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1.#ctor(de.ahzf.Vanaheimr.Styx.IPipe{`0,System.Boolean}[])">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">Multiple IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1.#ctor(System.Collections.Generic.IEnumerable{de.ahzf.Vanaheimr.Styx.IPipe{`0,System.Boolean}})">
            <summary>
            Creates a new pipe based on the given pipes.
            </summary>
            <param name="myPipes">A collection of IPipes&lt;S, Boolean&gt;.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.Concurrent.AndFilterPipeConcurrent`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next
            element; false if the enumerator has passed the end of the
            collection.
            </returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FileFilter">
            <summary>
            A delegate to filter files based on their FileInfo.
            </summary>
            <param name="myFileInfo">The FileInfo of a given file.</param>
            <returns>true to filter (ignore) the file, else false.</returns>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.FuncArrowExtensions">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrowExtensions.FuncArrow``2(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Func{``0,``1})">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Func">A generic transformation of incoming messages into outgoing messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrowExtensions.FuncArrow``2(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Func{``0,``1},de.ahzf.Vanaheimr.Styx.MessageRecipient{``1},de.ahzf.Vanaheimr.Styx.MessageRecipient{``1}[])">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Func">A generic transformation of incoming messages into outgoing messages.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.FuncArrowExtensions.FuncArrow``2(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Func{``0,``1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``1},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``1}[])">
            <summary>
            A generic Arrow transforming incoming messages into outgoing messages.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Func">A generic transformation of incoming messages into outgoing messages.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.ActionArrowExtensions">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrowExtensions.ActionArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Action{``0})">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrowExtensions.ActionArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Action{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.ActionArrowExtensions.ActionArrow``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},System.Action{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The ActionArrow is much like the IdentityArrow, but calls
            an Action &lt;S&gt; on every accepted message/object before
            forwarding it.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Action">An Action &lt;S&gt; to invoke on every accepted message/object before forwarding it.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="T:de.ahzf.Vanaheimr.Styx.MinMaxArrowExtensions">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrowExtensions.MinMax``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0,``0)">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrowExtensions.MinMax``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0,``0,de.ahzf.Vanaheimr.Styx.MessageRecipient{``0},de.ahzf.Vanaheimr.Styx.MessageRecipient{``0}[])">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
        <member name="M:de.ahzf.Vanaheimr.Styx.MinMaxArrowExtensions.MinMax``1(de.ahzf.Vanaheimr.Styx.IArrowSender{``0},``0,``0,de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0},de.ahzf.Vanaheimr.Styx.IArrowReceiver{``0}[])">
            <summary>
            The MinMaxArrow produces two side effects which keep
            track of the Min and Max values of S.
            </summary>
            <param name="ArrowSender">The sender of the messages/objects.</param>
            <param name="Min">The initial minimum.</param>
            <param name="Max">The initial maximum.</param>
            <param name="Recipient">A recipient of the processed messages.</param>
            <param name="Recipients">Further recipients of the processed messages.</param>
        </member>
    </members>
</doc>
